from odoo import models, fields, api
from .base_model import AmanatBaseModel


class TestRealtime(models.Model, AmanatBaseModel):
    _name = 'amanat.test.realtime'
    _inherit = ['amanat.base.model', "mail.thread", "mail.activity.mixin"]
    _description = '–¢–µ—Å—Ç Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π'

    name = fields.Char(string='–ù–∞–∑–≤–∞–Ω–∏–µ', required=True, tracking=True)
    description = fields.Text(string='–û–ø–∏—Å–∞–Ω–∏–µ', tracking=True)
    value = fields.Float(string='–ó–Ω–∞—á–µ–Ω–∏–µ', tracking=True)
    active = fields.Boolean(string='–ê–∫—Ç–∏–≤–Ω–æ', default=True, tracking=True)
    test_date = fields.Date(string='–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞', default=fields.Date.today, tracking=True)
    
    state = fields.Selection([
        ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
        ('in_progress', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'),
        ('done', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'),
        ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω–æ')
    ], string='–°–æ—Å—Ç–æ—è–Ω–∏–µ', default='draft', tracking=True)
    
    partner_id = fields.Many2one('res.partner', string='–ü–∞—Ä—Ç–Ω–µ—Ä', tracking=True)
    
    def _get_realtime_fields(self):
        """–ü–æ–ª—è –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
        return [
            'id', 'display_name', 'name', 'description', 'value', 'active',
            'test_date', 'state', 'partner_id', 'create_date', 'write_date'
        ]
    
    def action_start_test(self):
        """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.write({'state': 'in_progress'})
        return True
    
    def action_complete_test(self):
        """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
        self.write({'state': 'done'})
        return True
    
    def action_cancel_test(self):
        """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ—Å—Ç–∞"""
        self.write({'state': 'cancelled'})
        return True
    
    def action_test_realtime_update(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        import random
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info("Starting real-time test update")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        new_value = random.randint(1, 1000)
        self.write({
            'value': new_value,
            'description': f'–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {fields.Datetime.now()}'
        })
        
        _logger.info(f"Real-time test update completed with value: {new_value}")
        
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': '–¢–µ—Å—Ç real-time',
                'message': f'–ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_value}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∫–ª–∞–¥–∫–∏!',
                'type': 'info',
                'sticky': False,
            }
        }
    
    def action_test_bus_directly(self):
        """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ bus —Å–æ–æ–±—â–µ–Ω–∏—è"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info("Testing direct bus message sending")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        try:
            test_message = {
                'type': 'update',
                'model': self._name,
                'user_id': self.env.user.id,
                'user_name': self.env.user.name,
                'timestamp': fields.Datetime.now().isoformat(),
                'records': [{
                    'id': self.id,
                    'display_name': self.display_name,
                    'name': self.name,
                    'test_message': '–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç bus —Å–æ–æ–±—â–µ–Ω–∏—è!'
                }],
                'changed_fields': ['test_message']
            }
            
            self.env['bus.bus']._sendone("realtime_updates", 'realtime_updates', test_message)
            _logger.info("Direct bus message sent successfully")
            
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–¢–µ—Å—Ç Bus',
                    'message': '–ü—Ä—è–º–æ–µ bus —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞.',
                    'type': 'success',
                    'sticky': False,
                }
            }
        except Exception as e:
            _logger.error(f"Error sending direct bus message: {e}")
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–û—à–∏–±–∫–∞ Bus',
                    'message': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ bus —Å–æ–æ–±—â–µ–Ω–∏—è: {e}',
                    'type': 'danger',
                    'sticky': True,
                }
            }
    
    def action_simple_bus_test(self):
        """–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç bus —Å–æ–æ–±—â–µ–Ω–∏—è"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info("=== STARTING SIMPLE BUS TEST ===")
        
        try:
            # –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            simple_message = {
                'type': 'update',
                'test': 'Hello from Odoo!',
                'timestamp': fields.Datetime.now().isoformat()
            }
            
            _logger.info(f"Sending simple message: {simple_message}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.env['bus.bus']._sendone("realtime_updates", 'realtime_updates', simple_message)
            
            _logger.info("Simple bus message sent successfully!")
            
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–ü—Ä–æ—Å—Ç–æ–π Bus —Ç–µ—Å—Ç',
                    'message': '–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞.',
                    'type': 'success',
                }
            }
            
        except Exception as e:
            _logger.error(f"Simple bus test failed: {e}")
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–û—à–∏–±–∫–∞',
                    'message': f'–¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}',
                    'type': 'danger',
                }
            }
    
    def action_force_realtime_update(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info("üî• FORCE REALTIME UPDATE TEST")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            self.write({
                'description': f'–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {fields.Datetime.now()}'
            })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é  
            self._send_realtime_notification('update', ['description'])
            
            _logger.info("üî• Force update completed")
            
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
                    'message': '–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏.',
                    'type': 'success',
                }
            }
            
        except Exception as e:
            _logger.error(f"Force update failed: {e}")
            import traceback
            _logger.error(f"Traceback: {traceback.format_exc()}")
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                    'message': f'–û—à–∏–±–∫–∞: {e}',
                    'type': 'danger',
                }
            }
    
    def action_test_new_realtime_system(self):
        """–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã real-time —Å –ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info("=== TESTING NEW REALTIME SYSTEM ===")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            # _logger.info("Calling _send_realtime_notification manually...")
            # self._send_realtime_notification('update', ['test_field'])
            
            _logger.info("Manual notification sent!")
            
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã',
                    'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞.',
                    'type': 'success',
                }
            }
            
        except Exception as e:
            _logger.error(f"New system test failed: {e}")
            import traceback
            _logger.error(f"Traceback: {traceback.format_exc()}")
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–û—à–∏–±–∫–∞',
                    'message': f'–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ —É–¥–∞–ª—Å—è: {e}',
                    'type': 'danger',
                }
            }
    
    def action_test_direct_user_channel(self):
        """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info("=== TESTING DIRECT USER CHANNEL ===")
        
        try:
            user_id = self.env.user.id
            user_channel = f"res.users,{user_id}"
            
            test_message = {
                'type': 'update',
                'model': self._name,
                'user_id': user_id,
                'user_name': self.env.user.name,
                'timestamp': fields.Datetime.now().isoformat(),
                'records': [{
                    'id': self.id,
                    'display_name': self.display_name,
                    'name': self.name,
                    'test_message': '–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞!'
                }],
                'changed_fields': ['test_message']
            }
            
            _logger.info(f"Sending to user channel: {user_channel}")
            _logger.info(f"Message: {test_message}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
            self.env['bus.bus']._sendone(user_channel, 'amanat_realtime_update', test_message)
            
            _logger.info("Direct user channel message sent!")
            
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–¢–µ—Å—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞',
                    'message': f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª {user_channel}! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞.',
                    'type': 'success',
                }
            }
            
        except Exception as e:
            _logger.error(f"Direct user channel test failed: {e}")
            import traceback
            _logger.error(f"Traceback: {traceback.format_exc()}")
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–û—à–∏–±–∫–∞',
                    'message': f'–¢–µ—Å—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —É–¥–∞–ª—Å—è: {e}',
                    'type': 'danger',
                }
            }
    
    def action_direct_bus_test(self):
        """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ bus —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info("üß™ DIRECT BUS TEST: Starting...")
        
        try:
            user = self.env.user
            user_channel = f"res.users,{user.id}"
            
            test_message = {
                'type': 'update',
                'model': self._name,
                'user_id': user.id,
                'user_name': user.name,
                'timestamp': fields.Datetime.now().isoformat(),
                'records': [{
                    'id': self.id,
                    'display_name': self.display_name,
                    'test_message': '–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç bus!'
                }],
                'changed_fields': ['test_message']
            }
            
            _logger.info(f"üß™ DIRECT BUS TEST: Sending to channel {user_channel}")
            _logger.info(f"üß™ DIRECT BUS TEST: Message: {test_message}")
            
            # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
            methods_tried = []
            success_method = None
            
            # –ú–µ—Ç–æ–¥ 1: _sendone
            try:
                self.env['bus.bus']._sendone(user_channel, 'amanat_realtime_update', test_message)
                methods_tried.append("_sendone: ‚úÖ")
                success_method = "_sendone"
                _logger.info("üß™ Method 1 (_sendone) succeeded")
            except Exception as e:
                methods_tried.append(f"_sendone: ‚ùå {e}")
                _logger.warning(f"üß™ Method 1 (_sendone) failed: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: sendone (–±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
            try:
                self.env['bus.bus'].sendone(user_channel, 'amanat_realtime_update', test_message)
                methods_tried.append("sendone: ‚úÖ")
                if not success_method:
                    success_method = "sendone"
                _logger.info("üß™ Method 2 (sendone) succeeded")
            except Exception as e:
                methods_tried.append(f"sendone: ‚ùå {e}")
                _logger.warning(f"üß™ Method 2 (sendone) failed: {e}")
            
            # –ú–µ—Ç–æ–¥ 3: –ü—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ bus.bus
            try:
                self.env['bus.bus'].sudo().create({
                    'channel': user_channel,
                    'message': test_message
                })
                methods_tried.append("direct create: ‚úÖ")
                if not success_method:
                    success_method = "direct create"
                _logger.info("üß™ Method 3 (direct create) succeeded")
            except Exception as e:
                methods_tried.append(f"direct create: ‚ùå {e}")
                _logger.warning(f"üß™ Method 3 (direct create) failed: {e}")
            
            # –ú–µ—Ç–æ–¥ 4: –ß–µ—Ä–µ–∑ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
            try:
                import json
                self.env['bus.bus'].sudo().create({
                    'channel': user_channel,
                    'message': json.dumps({
                        'type': 'amanat_realtime_update',
                        'payload': test_message
                    })
                })
                methods_tried.append("JSON create: ‚úÖ")
                if not success_method:
                    success_method = "JSON create"
                _logger.info("üß™ Method 4 (JSON create) succeeded")
            except Exception as e:
                methods_tried.append(f"JSON create: ‚ùå {e}")
                _logger.warning(f"üß™ Method 4 (JSON create) failed: {e}")
            
            _logger.info("üß™ DIRECT BUS TEST: Completed")
            
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–ü—Ä—è–º–æ–π Bus —Ç–µ—Å—Ç',
                    'message': f'–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –†–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥: {success_method or "–ù–ï–¢"}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.',
                    'type': 'success' if success_method else 'warning',
                    'sticky': True,
                }
            }
            
        except Exception as e:
            _logger.error(f"üß™ DIRECT BUS TEST ERROR: {e}")
            import traceback
            _logger.error(f"üß™ TRACEBACK: {traceback.format_exc()}")
            
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': '–û—à–∏–±–∫–∞ Bus —Ç–µ—Å—Ç–∞',
                    'message': f'–û—à–∏–±–∫–∞: {e}',
                    'type': 'danger',
                }
            } 