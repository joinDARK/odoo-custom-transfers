from odoo import models
import base64
import io
import logging
import re
import zipfile
import os
import tempfile
import subprocess
from xml.etree import ElementTree as ET

try:
    import pymupdf
    PYMUPDF_AVAILABLE = True
except Exception:
    PYMUPDF_AVAILABLE = False

try:
    from openpyxl import load_workbook
    OPENPYXL_AVAILABLE = True
except ImportError:
    OPENPYXL_AVAILABLE = False

try:
    from docx import Document
    from docx.shared import Inches
    from docx.enum.table import WD_ALIGN_VERTICAL
    PYTHON_DOCX_AVAILABLE = True
except ImportError:
    PYTHON_DOCX_AVAILABLE = False



_logger = logging.getLogger(__name__)


class AmanatZayavkaDocuments(models.Model):
    _inherit = 'amanat.zayavka'

    def extract_text_from_docx_attachment(self, attachment):
        try:
            if not attachment or not attachment.datas:
                _logger.warning("[extract_text_from_docx_attachment] –ø—É—Å—Ç–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ")
                return None

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è/—Ç–∏–ø–æ–≤
            name_lower = (attachment.name or '').lower()
            mimetype = (attachment.mimetype or '').lower()
            if not (name_lower.endswith('.docx') or 'officedocument.wordprocessingml.document' in mimetype):
                _logger.info(f"[extract_text_from_docx_attachment] –≤–ª–æ–∂–µ–Ω–∏–µ {attachment.name} –Ω–µ DOCX (mimetype={mimetype})")
                return None

            docx_bytes = base64.b64decode(attachment.datas)
            return self._extract_text_from_docx_bytes(docx_bytes)

        except Exception as e:
            _logger.error(f"[extract_text_from_docx_attachment] –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {attachment and attachment.name}: {str(e)}")
            return None

    @staticmethod
    def _extract_text_from_docx_bytes(docx_bytes):
        if not docx_bytes:
            return None

        try:
            with zipfile.ZipFile(io.BytesIO(docx_bytes)) as zf:
                namelist = zf.namelist()

                # –û—Å–Ω–æ–≤–Ω—ã–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç
                primary_parts = [
                    'word/document.xml',
                ]
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏/–ø–æ–¥–≤–∞–ª—ã/—Å–Ω–æ—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                extra_parts = [n for n in namelist if n.startswith('word/header') and n.endswith('.xml')]
                extra_parts += [n for n in namelist if n.startswith('word/footer') and n.endswith('.xml')]
                for part in ['word/footnotes.xml', 'word/endnotes.xml']:
                    if part in namelist:
                        extra_parts.append(part)

                parts_to_read = [p for p in primary_parts if p in namelist] + extra_parts
                if not parts_to_read:
                    # –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π DOCX –±–µ–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö —á–∞—Å—Ç–µ–π
                    return None

                all_paragraphs = []
                ns = {'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'}

                def extract_paragraphs(xml_content):
                    try:
                        root = ET.fromstring(xml_content)
                    except ET.ParseError:
                        return []
                    paragraphs = []
                    # –ü–∞—Ä–∞–≥—Ä–∞—Ñ—ã <w:p>
                    for p in root.findall('.//w:p', ns):
                        text_chunks = []
                        # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ run-–∞–º <w:r>
                        for node in p.iter():
                            tag = node.tag.split('}')[-1]
                            if tag == 't':  # <w:t>
                                if node.text:
                                    text_chunks.append(node.text)
                            elif tag == 'br':  # <w:br/>
                                text_chunks.append('\n')
                            elif tag == 'tab':  # <w:tab/>
                                text_chunks.append('\t')
                        paragraph_text = ''.join(text_chunks)
                        paragraph_text = paragraph_text.replace('\r', '')
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
                        paragraph_text = re.sub(r'[ \t\xa0]+', ' ', paragraph_text)
                        paragraph_text = paragraph_text.strip()
                        if paragraph_text:
                            paragraphs.append(paragraph_text)
                    return paragraphs

                for part_name in parts_to_read:
                    try:
                        with zf.open(part_name) as fp:
                            xml_data = fp.read()
                        all_paragraphs.extend(extract_paragraphs(xml_data))
                    except KeyError:
                        # –ß–∞—Å—Ç–∏ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        continue

                if not all_paragraphs:
                    return None

                # –°–∫–ª–µ–∏–≤–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∞–±–∑–∞—Ü–µ–≤
                text = '\n'.join(all_paragraphs)
                # –ß–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                text = re.sub(r'\n{3,}', '\n\n', text)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if text and text.strip():
                    final_text = text.strip()
                    _logger.info(f"[_extract_text_from_docx_bytes] –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç: {len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤, {len(all_paragraphs)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
                    _logger.info(f"[_extract_text_from_docx_bytes] –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {final_text[:200]}...")
                    if len(final_text) > 400:
                        _logger.info(f"[_extract_text_from_docx_bytes] –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: ...{final_text[-200:]}")
                    return final_text
                else:
                    _logger.warning("[_extract_text_from_docx_bytes] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç")
                    return None

        except zipfile.BadZipFile:
            # –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º DOCX
            return None
        except Exception:
            return None

    # === New helpers for auto-signing Assignment Start with STELLAR ===
    def _detect_file_type(self, file_data, file_name=None):
        """Lightweight file type detection for pdf/docx/zip."""
        if not file_data:
            _logger.warning(f"[_detect_file_type] No file data provided")
            return None
        try:
            if isinstance(file_data, str):
                decoded = base64.b64decode(file_data)
            else:
                decoded = file_data

            _logger.info(f"[_detect_file_type] File name: {file_name}, first 10 bytes: {decoded[:10]}")

            if decoded[:4] == b'%PDF':
                _logger.info(f"[_detect_file_type] Detected as PDF by header")
                return 'pdf'
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞ –¥–ª—è PDF
            if file_name and file_name.lower().endswith('.pdf'):
                _logger.info(f"[_detect_file_type] Detected as PDF by extension (fallback)")
                return 'pdf'
            if decoded[:2] == b'PK':
                _logger.info(f"[_detect_file_type] Detected ZIP-based file")
                # Rely on extension hint if provided
                if file_name and file_name.lower().endswith('.docx'):
                    _logger.info(f"[_detect_file_type] Detected as DOCX by extension")
                    return 'docx'
                # Inspect minimal ZIP content header
                if b'word/' in decoded[:4000]:
                    _logger.info(f"[_detect_file_type] Detected as DOCX by content")
                    return 'docx'
                _logger.info(f"[_detect_file_type] Detected as generic ZIP")
                return 'zip'
            
            _logger.warning(f"[_detect_file_type] Unknown file type, first 10 bytes: {decoded[:10]}")
            return 'unknown'
        except Exception as e:
            _logger.error(f"[_detect_file_type] Error detecting file type: {e}")
            return 'unknown'

    def _fix_table_formatting(self, docx_path):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ DOCX –¥–ª—è –ª—É—á—à–µ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PDF"""
        if not PYTHON_DOCX_AVAILABLE:
            _logger.warning("python-docx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
            return docx_path
            
        try:
            _logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            doc = Document(docx_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            for table in doc.tables:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ã
                table.autofit = False
                
                for row in table.rows:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
                    row.height = Inches(0.3)
                    
                    for cell in row.cells:
                        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
                        cell.vertical_alignment = WD_ALIGN_VERTICAL.TOP
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ —è—á–µ–π–∫–∞—Ö
                        cell.margin_top = Inches(0.05)
                        cell.margin_bottom = Inches(0.05)
                        cell.margin_left = Inches(0.1)
                        cell.margin_right = Inches(0.1)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ —è—á–µ–π–∫–µ
                        for paragraph in cell.paragraphs:
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
                            paragraph.paragraph_format.line_spacing = 1.0
                            paragraph.paragraph_format.space_before = 0
                            paragraph.paragraph_format.space_after = 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            fixed_path = docx_path.replace('.docx', '_fixed.docx')
            doc.save(fixed_path)
            _logger.info("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return fixed_path
            
        except Exception as e:
            _logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü: {e}")
            return docx_path

    def _convert_docx_to_pdf(self, docx_data):
        """Convert DOCX (base64 or bytes) to PDF using LibreOffice with preserved formatting."""
        if not docx_data:
            raise ValueError('DOCX data is empty')

        try:
            raw = base64.b64decode(docx_data) if isinstance(docx_data, str) else docx_data
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º (–≤–∞–∂–Ω–æ –¥–ª—è LibreOffice)
            with tempfile.NamedTemporaryFile(suffix='.docx', delete=False, prefix='odoo_convert_') as docx_temp:
                docx_temp.write(raw)
                docx_path = docx_temp.name
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
            fixed_docx_path = self._fix_table_formatting(docx_path)

            out_dir = tempfile.mkdtemp()
            try:
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ LibreOffice –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                _logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DOCX –≤ PDF: {fixed_docx_path}")
                
                # –ú–µ—Ç–æ–¥ 1: –¢–æ—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
                cmd_precise = [
                    'libreoffice', '--headless', '--invisible', '--nodefault', '--nolockcheck',
                    '--convert-to', 'pdf:writer_pdf_Export:{"EmbedStandardFonts":true,"ExportFormFields":false,"FormsType":0,"ExportBookmarks":false,"ExportNotes":false,"ExportNotesPages":false,"ExportOnlyNotesPages":false,"UseTransitionEffects":false,"IsSkipEmptyPages":false,"IsAddStream":false,"SelectPdfVersion":0,"CompressMode":2,"JPEGQuality":90,"ImageResolution":300}',
                    '--outdir', out_dir,
                    fixed_docx_path
                ]
                
                # –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (fallback)
                cmd_simple = [
                    'libreoffice', '--headless', '--convert-to', 'pdf',
                    '--outdir', out_dir, fixed_docx_path
                ]
                
                # –ü—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                result = None
                try:
                    _logger.info("–ü—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
                    result = subprocess.run(cmd_precise, capture_output=True, text=True, timeout=90)
                    if result.returncode == 0:
                        _logger.info("‚úÖ –¢–æ—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    else:
                        _logger.warning(f"–¢–æ—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {result.stderr}")
                        raise RuntimeError("Fallback to simple conversion")
                except Exception as e:
                    _logger.warning(f"–û—à–∏–±–∫–∞ —Ç–æ—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–æ—Å—Ç—É—é...")
                    result = subprocess.run(cmd_simple, capture_output=True, text=True, timeout=60)
                    if result.returncode == 0:
                        _logger.info("‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    else:
                        _logger.error(f"‚ùå –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {result.stderr}")
                if result.returncode != 0:
                    raise RuntimeError(f'LibreOffice error: {result.stderr}')

                pdf_filename = os.path.splitext(os.path.basename(fixed_docx_path))[0] + '.pdf'
                pdf_path = os.path.join(out_dir, pdf_filename)
                if not os.path.exists(pdf_path):
                    raise FileNotFoundError('Converted PDF not found')

                with open(pdf_path, 'rb') as f:
                    pdf_bytes = f.read()
                return base64.b64encode(pdf_bytes)
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.unlink(docx_path)
                except Exception:
                    pass
                try:
                    if fixed_docx_path != docx_path:
                        os.unlink(fixed_docx_path)
                except Exception:
                    pass
                try:
                    pdf_filename = os.path.splitext(os.path.basename(fixed_docx_path))[0] + '.pdf'
                    pdf_path_cleanup = os.path.join(out_dir, pdf_filename)
                    if os.path.exists(pdf_path_cleanup):
                        os.unlink(pdf_path_cleanup)
                    os.rmdir(out_dir)
                except Exception:
                    pass
        except Exception as e:
            _logger.error(f"DOCX‚ÜíPDF conversion failed: {e}")
            raise



    def _find_text_positions_in_pdf(self, pdf_bytes, keywords):
        """
        Find positions of any of the keywords (case-insensitive) in the PDF.
        Returns list of dicts: {page_number (1-based), bbox: (x0,y0,x1,y1), text}
        """
        if not PYMUPDF_AVAILABLE:
            return []
        if not pdf_bytes:
            return []
        matches = []
        try:
            doc = pymupdf.open(stream=pdf_bytes, filetype='pdf')
            lowered = [kw.lower() for kw in keywords]
            for page_index in range(len(doc)):
                page = doc[page_index]
                text_dict = page.get_text('dict')
                for block in text_dict.get('blocks', []):
                    for line in block.get('lines', []):
                        for span in line.get('spans', []):
                            span_text = (span.get('text') or '').strip()
                            if not span_text:
                                continue
                            if any(kw in span_text.lower() for kw in lowered):
                                bbox = span.get('bbox')
                                if bbox:
                                    matches.append({
                                        'page_number': page_index + 1,
                                        'bbox': tuple(bbox),
                                        'text': span_text,
                                    })
            doc.close()
        except Exception as e:
            _logger.error(f"Error searching PDF text: {e}")
        return matches

    def _find_signature_position_in_pdf(self, pdf_bytes):
        """
        –ò—â–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –≤ PDF –¥–æ–∫—É–º–µ–Ω—Ç–µ.
        –ò—â–µ—Ç —Å—Ç—Ä–æ–∫—É "–°—É–±–∞–≥–µ–Ω—Ç/ Subagent" –≤ –∫–æ–Ω—Ü–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ–±—ã—á–Ω–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–µ–π).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.
        """
        if not PYMUPDF_AVAILABLE or not pdf_bytes:
            return []
        
        matches = []
        try:
            doc = pymupdf.open(stream=pdf_bytes, filetype='pdf')
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –º–µ—Å—Ç–æ –ø–æ–¥–ø–∏—Å–∏
            signature_patterns = [
                '–°—É–±–∞–≥–µ–Ω—Ç/ Subagent',
                '–°—É–±–∞–≥–µ–Ω—Ç/Subagent', 
                '–°—É–±–∞–≥–µ–Ω—Ç / Subagent',
                '–°—É–±–∞–≥–µ–Ω—Ç Subagent',
                '–°—É–±–∞–≥–µ–Ω—Ç:', 
                'Subagent:'
            ]
            
            for page_index in range(len(doc)):
                page = doc[page_index]
                text_dict = page.get_text('dict')
                
                for block in text_dict.get('blocks', []):
                    for line in block.get('lines', []):
                        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏
                        line_text = ''
                        line_bbox = None
                        
                        for span in line.get('spans', []):
                            span_text = (span.get('text') or '').strip()
                            if span_text:
                                line_text += span_text + ' '
                                if line_bbox is None:
                                    line_bbox = span.get('bbox')
                        
                        line_text = line_text.strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∏
                        for pattern in signature_patterns:
                            if pattern.lower() in line_text.lower():
                                _logger.info(f"[_find_signature_position_in_pdf] Found signature pattern '{pattern}' in line: '{line_text}'")
                                if line_bbox:
                                    matches.append({
                                        'page_number': page_index + 1,
                                        'bbox': tuple(line_bbox),
                                        'text': line_text,
                                        'pattern': pattern
                                    })
                                break
            
            doc.close()
            _logger.info(f"[_find_signature_position_in_pdf] Found {len(matches)} signature positions")
            
        except Exception as e:
            _logger.error(f"[_find_signature_position_in_pdf] Error searching for signature position: {e}")
        
        return matches

    def _detect_signature_type_from_pdf(self, pdf_bytes):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∏ (–¢–î–ö –∏–ª–∏ –°–¢–ï–õ–õ–ê–†) –ø–æ —Ç–µ–∫—Å—Ç—É –≤ PDF –¥–æ–∫—É–º–µ–Ω—Ç–µ.
        –ò—â–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è '–¢–î–ö', 'TDK', '–°–¢–ï–õ–õ–ê–†', 'STELLAR' —Ä—è–¥–æ–º —Å –º–µ—Å—Ç–æ–º –ø–æ–¥–ø–∏—Å–∏.
        """
        if not PYMUPDF_AVAILABLE or not pdf_bytes:
            _logger.warning("[_detect_signature_type_from_pdf] PyMuPDF not available or no PDF data")
            return '–°–¢–ï–õ–õ–ê–†'
        
        try:
            doc = pymupdf.open(stream=pdf_bytes, filetype='pdf')
            
            tdk_keywords = ['–¢–î–ö', 'TDK', '—Ç–¥–∫', '–¢–¥–∫']
            stellar_keywords = ['–°–¢–ï–õ–õ–ê–†', 'STELLAR', '—Å—Ç–µ–ª–ª–∞—Ä', '–°—Ç–µ–ª–ª–∞—Ä']
            
            all_text = ""
            for page_index in range(len(doc)):
                page = doc[page_index]
                page_text = page.get_text()
                all_text += page_text.lower()
            
            doc.close()
            
            tdk_found = any(keyword.lower() in all_text for keyword in tdk_keywords)
            stellar_found = any(keyword.lower() in all_text for keyword in stellar_keywords)
            
            _logger.info(f"[_detect_signature_type_from_pdf] TDK found: {tdk_found}, STELLAR found: {stellar_found}")
            
            if tdk_found and stellar_found:
                tdk_count = sum(all_text.count(keyword.lower()) for keyword in tdk_keywords)
                stellar_count = sum(all_text.count(keyword.lower()) for keyword in stellar_keywords)
                _logger.info(f"[_detect_signature_type_from_pdf] TDK count: {tdk_count}, STELLAR count: {stellar_count}")
                return '–¢–î–ö' if tdk_count > stellar_count else '–°–¢–ï–õ–õ–ê–†'
            elif tdk_found:
                return '–¢–î–ö'
            elif stellar_found:
                return '–°–¢–ï–õ–õ–ê–†'
            else:
                _logger.info("[_detect_signature_type_from_pdf] No signature type keywords found, defaulting to –°–¢–ï–õ–õ–ê–†")
                return '–°–¢–ï–õ–õ–ê–†'
                
        except Exception as e:
            _logger.error(f"[_detect_signature_type_from_pdf] Error detecting signature type: {e}")
            return '–°–¢–ï–õ–õ–ê–†'

    def _find_signature_and_stamp_records(self, signature_type):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (–¢–î–ö –∏–ª–∏ –°–¢–ï–õ–õ–ê–†).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (signature_record, stamp_record).
        """
        if signature_type == '–¢–î–ö':
            search_terms = ['–¢–î–ö', 'TDK']
        else:  # –°–¢–ï–õ–õ–ê–†
            search_terms = ['–°–¢–ï–õ–õ–ê–†', 'STELLAR']
        
        sig_record = None
        stamp_record = None
        
        # –ò—â–µ–º –ø–æ–¥–ø–∏—Å—å
        for term in search_terms:
            sig_record = self.env['signature.library'].search([
                ('name', 'ilike', term),
                ('signature_type', '=', 'signature'),
                ('active', '=', True)
            ], limit=1)
            if sig_record:
                break
        
        # –ò—â–µ–º –ø–µ—á–∞—Ç—å
        for term in search_terms:
            stamp_record = self.env['signature.library'].search([
                ('name', 'ilike', term),
                ('signature_type', '=', 'stamp'),
                ('active', '=', True)
            ], limit=1)
            if stamp_record:
                break
        
        _logger.info(f"[_find_signature_and_stamp_records] Found signature: {sig_record.name if sig_record else 'None'}")
        _logger.info(f"[_find_signature_and_stamp_records] Found stamp: {stamp_record.name if stamp_record else 'None'}")
        
        return sig_record, stamp_record

    def _sign_single_document(self, pdf_bytes, target_match, sig_record, stamp_record, signature_type):
        """
        –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–∏–Ω PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∏ (–¢–î–ö –∏–ª–∏ –°–¢–ï–õ–õ–ê–†).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ DOCX –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        try:
            doc = pymupdf.open(stream=pdf_bytes, filetype='pdf')
            page_index = target_match['page_number'] - 1
            
            if page_index >= len(doc):
                _logger.warning(f"[_sign_single_document] Page index out of range: {page_index}")
                doc.close()
                return None
                
            page = doc[page_index]
            x0, y0, x1, y1 = target_match['bbox']

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∏
            if signature_type == '–¢–î–ö':
                # –î–ª—è –¢–î–ö: –ø–æ–¥–ø–∏—Å—å –º–µ–Ω—å—à–µ –∏ –≤—ã—à–µ
                sig_w = (sig_record.default_width or 150) * 1.1  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 10% (–º–µ–Ω—å—à–µ —á–µ–º —É –°–¢–ï–õ–õ–ê–†)
                sig_h = (sig_record.default_height or 50) * 1.1   # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 10%
                padding_y = -12  # –ø–æ–¥–Ω–∏–º–∞–µ–º –≤—ã—à–µ (–±–æ–ª—å—à–∏–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø)
                _logger.info(f"[_sign_single_document] Using –¢–î–ö settings: size multiplier 1.1, padding_y: {padding_y}")
            else:  # –°–¢–ï–õ–õ–ê–†
                # –î–ª—è –°–¢–ï–õ–õ–ê–†: –∫–∞–∫ –±—ã–ª–æ (–±–æ–ª—å—à–µ –∏ –Ω–∏–∂–µ)
                sig_w = (sig_record.default_width or 150) * 1.3  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 30%
                sig_h = (sig_record.default_height or 50) * 1.3   # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 30%
                padding_y = -4  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç—Å—Ç—É–ø
                _logger.info(f"[_sign_single_document] Using –°–¢–ï–õ–õ–ê–† settings: size multiplier 1.3, padding_y: {padding_y}")

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
            sig_x = x0
            sig_y = y1 + padding_y  # —Ä–∞–∑–º–µ—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç–∞

            sig_rect = pymupdf.Rect(sig_x, sig_y, sig_x + sig_w, sig_y + sig_h)
            page.insert_image(sig_rect, stream=base64.b64decode(sig_record.image))

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–µ—á–∞—Ç–∏ (–æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤)
            stamp_w = stamp_record.default_width or 100  # —Ä–∞–∑–º–µ—Ä –ø–µ—á–∞—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            stamp_h = stamp_record.default_height or 100  # —Ä–∞–∑–º–µ—Ä –ø–µ—á–∞—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            padding_x = 15  # –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å—å—é –∏ –ø–µ—á–∞—Ç—å—é
            stamp_x = sig_x + sig_w + padding_x
            stamp_y = sig_y  # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é –ø–æ–¥–ø–∏—Å–∏

            stamp_rect = pymupdf.Rect(stamp_x, stamp_y, stamp_x + stamp_w, stamp_y + stamp_h)
            page.insert_image(stamp_rect, stream=base64.b64decode(stamp_record.image))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π PDF
            signed_pdf_bytes = doc.tobytes()
            doc.close()
            
            _logger.info(f"[_sign_single_document] Successfully signed document with {signature_type} signature - returning PDF")
            return {'pdf': signed_pdf_bytes}
            
        except Exception as e:
            _logger.error(f"[_sign_single_document] Error while signing document: {e}")
            if 'doc' in locals():
                doc.close()
            return None

    def should_auto_sign_document(self, attachment):
        """
        –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:
        1. –¢–µ–∫—Å—Ç '–°—É–±–∞–≥–µ–Ω—Ç'/'Subagent' 
        2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ '–¢–î–ö'/'TDK' –∏–ª–∏ '–°–¢–ï–õ–õ–ê–†'/'STELLAR'
        """
        if not attachment or not attachment.datas:
            return False
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_type = self._detect_file_type(attachment.datas, attachment.name or '')
            if file_type == 'docx':
                pdf_b64 = self._convert_docx_to_pdf(attachment.datas)
                pdf_bytes = base64.b64decode(pdf_b64)
            elif file_type == 'pdf':
                pdf_bytes = base64.b64decode(attachment.datas)
            else:
                _logger.info(f"[should_auto_sign_document] Unsupported file type '{file_type}' for '{attachment.name}'")
                return False

            # –£–°–õ–û–í–ò–ï 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ '–°—É–±–∞–≥–µ–Ω—Ç/ Subagent'
            subagent_matches = self._find_signature_position_in_pdf(pdf_bytes)
            if not subagent_matches:
                _logger.info(f"[should_auto_sign_document] Document '{attachment.name}' does not contain signature position '–°—É–±–∞–≥–µ–Ω—Ç/ Subagent' - no signing needed")
                return False

            # –£–°–õ–û–í–ò–ï 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¢–î–ö –∏–ª–∏ –°–¢–ï–õ–õ–ê–†
            signature_type = self._detect_signature_type_from_pdf(pdf_bytes)
            if signature_type not in ['–¢–î–ö', '–°–¢–ï–õ–õ–ê–†']:
                _logger.info(f"[should_auto_sign_document] Document '{attachment.name}' does not contain –¢–î–ö/–°–¢–ï–õ–õ–ê–† information - no signing needed")
                return False
            
            _logger.info(f"[should_auto_sign_document] Document '{attachment.name}' meets all conditions for auto-signing: –°—É–±–∞–≥–µ–Ω—Ç + {signature_type}")
            return True
            
        except Exception as e:
            _logger.error(f"[should_auto_sign_document] Error checking document '{attachment.name}': {e}")
            return False

    def auto_sign_assignment_with_stellar(self):
        """
        When files are uploaded to `assignment_attachments`, automatically:
        - First check if document contains '–°—É–±–∞–≥–µ–Ω—Ç'/'Subagent' text
        - ONLY if text found: detect signature type (–¢–î–ö or –°–¢–ï–õ–õ–ê–†) from document text
        - supports both PDF and DOCX input files
        - place appropriate signature slightly below that text
        - place appropriate stamp to the right of the signature
        - save signed PDF document
        Save signed PDF file to `assignment_end_attachments`.
        """
        _logger.info(f"[auto_sign_assignment_with_stellar] ===== STARTING AUTO-SIGNING PROCESS FOR RECORD {self.id} =====")
        self.ensure_one()
        attachments = self.assignment_attachments
        _logger.info(f"[auto_sign_assignment_with_stellar] Found {len(attachments)} attachments in assignment_attachments field")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –≤–ª–æ–∂–µ–Ω–∏–∏
        for i, att in enumerate(attachments):
            _logger.info(f"[auto_sign_assignment_with_stellar] Attachment {i+1}: ID={att.id}, name='{att.name}', size={len(att.datas) if att.datas else 0} bytes")
        
        if not attachments:
            _logger.info("[auto_sign_assignment_with_stellar] No attachments to process")
            return False

        if not PYMUPDF_AVAILABLE:
            _logger.warning("[auto_sign_assignment_with_stellar] PyMuPDF not available; skipping auto signing")
            return False

        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è (–≤—ã—Ö–æ–¥ 2)
        if self.assignment_end_attachments:
            self.assignment_end_attachments.unlink()

        signed_attachments = []
        success_count = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for idx, attachment in enumerate(attachments):
            _logger.info(f"[auto_sign_assignment_with_stellar] Processing attachment {idx+1}/{len(attachments)}: {attachment.name}")
            
            if not attachment.datas:
                _logger.warning(f"[auto_sign_assignment_with_stellar] Attachment '{attachment.name}' has no data, skipping")
                continue
            
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                file_type = self._detect_file_type(attachment.datas, attachment.name or '')
                if file_type == 'docx':
                    pdf_b64 = self._convert_docx_to_pdf(attachment.datas)
                    pdf_bytes = base64.b64decode(pdf_b64)
                elif file_type == 'pdf':
                    pdf_bytes = base64.b64decode(attachment.datas)
                else:
                    _logger.warning(f"[auto_sign_assignment_with_stellar] Unsupported file type '{file_type}' for '{attachment.name}', skipping")
                    continue

                # –ü–ï–†–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–°—É–±–∞–≥–µ–Ω—Ç/ Subagent" –≤ –∫–æ–Ω—Ü–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                matches = self._find_signature_position_in_pdf(pdf_bytes)
                if not matches:
                    _logger.info(f"[auto_sign_assignment_with_stellar] Document '{attachment.name}' does not contain signature position '–°—É–±–∞–≥–µ–Ω—Ç/ Subagent' - SKIPPING (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∏)")
                    continue
                
                _logger.info(f"[auto_sign_assignment_with_stellar] Document '{attachment.name}' contains signature position '–°—É–±–∞–≥–µ–Ω—Ç/ Subagent' - proceeding with signing")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∏
                signature_type = self._detect_signature_type_from_pdf(pdf_bytes)
                _logger.info(f"[auto_sign_assignment_with_stellar] Detected signature type for '{attachment.name}': {signature_type}")

                # –ò—â–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –ø–µ—á–∞—Ç—å
                sig_record, stamp_record = self._find_signature_and_stamp_records(signature_type)
                if not sig_record or not stamp_record:
                    _logger.warning(f"[auto_sign_assignment_with_stellar] {signature_type} signature/stamp not found for '{attachment.name}', skipping")
                    continue

                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ PDF)
                signed_document_data = self._sign_single_document(pdf_bytes, matches[0], sig_record, stamp_record, signature_type)
                if signed_document_data and signed_document_data.get('pdf'):
                    base_name = attachment.name.rsplit('.', 1)[0]
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π PDF —Ñ–∞–π–ª
                    pdf_signed_name = f"signed_{base_name}_{idx+1}.pdf"
                    pdf_attachment = self.env['ir.attachment'].create({
                        'name': pdf_signed_name,
                        'datas': base64.b64encode(signed_document_data['pdf']),
                'res_model': self._name,
                'res_id': self.id,
                'mimetype': 'application/pdf',
            })
                    signed_attachments.append(pdf_attachment.id)
                    success_count += 1
                    _logger.info(f"[auto_sign_assignment_with_stellar] Successfully signed '{attachment.name}' -> PDF: '{pdf_signed_name}'")

            except Exception as e:
                _logger.error(f"[auto_sign_assignment_with_stellar] Error processing '{attachment.name}': {e}")
                continue

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if signed_attachments:
            _logger.info(f"[auto_sign_assignment_with_stellar] Attempting to save {len(signed_attachments)} signed files to assignment_end_attachments")
            _logger.info(f"[auto_sign_assignment_with_stellar] Signed attachment IDs: {signed_attachments}")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            self.assignment_end_attachments = [(6, 0, signed_attachments)]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            saved_attachments = self.assignment_end_attachments
            _logger.info(f"[auto_sign_assignment_with_stellar] After saving - assignment_end_attachments count: {len(saved_attachments)}")
            for att in saved_attachments:
                _logger.info(f"[auto_sign_assignment_with_stellar] Saved attachment: ID={att.id}, name='{att.name}'")
            
            _logger.info(f"[auto_sign_assignment_with_stellar] Successfully processed {success_count}/{len(attachments)} files")
            
            # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –ø–æ—Ä—É—á–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏
            from datetime import date
            today = date.today()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è
            vals_to_update = {}
            if not self.instruction_signed_date:
                vals_to_update['instruction_signed_date'] = today
                _logger.info(f"[auto_sign_assignment_with_stellar] Setting instruction_signed_date to {today}")
            
            if not self.assignment_signed_sovcom:
                vals_to_update['assignment_signed_sovcom'] = today
                _logger.info(f"[auto_sign_assignment_with_stellar] Setting assignment_signed_sovcom to {today}")
            
            if vals_to_update:
                self.write(vals_to_update)
                _logger.info(f"[auto_sign_assignment_with_stellar] Updated signature date fields: {list(vals_to_update.keys())}")
            else:
                _logger.info(f"[auto_sign_assignment_with_stellar] Signature date fields already set, no update needed")
            
            return True
        else:
            _logger.warning("[auto_sign_assignment_with_stellar] No files were successfully processed")
            return False

    def extract_text_from_excel_attachment(self, attachment):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ Excel —Ñ–∞–π–ª–æ–≤ (.xlsx, .xls) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YandexGPT
        """
        try:
            if not attachment or not attachment.datas:
                _logger.warning("[extract_text_from_excel_attachment] –ø—É—Å—Ç–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å openpyxl
            if not OPENPYXL_AVAILABLE:
                _logger.warning("[extract_text_from_excel_attachment] openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è/—Ç–∏–ø–æ–≤
            name_lower = (attachment.name or '').lower()
            mimetype = (attachment.mimetype or '').lower()
            
            excel_extensions = ('.xlsx', '.xls')
            excel_mimetypes = (
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'application/vnd.ms-excel'
            )
            
            if not (name_lower.endswith(excel_extensions) or any(mt in mimetype for mt in excel_mimetypes)):
                _logger.info(f"[extract_text_from_excel_attachment] –≤–ª–æ–∂–µ–Ω–∏–µ {attachment.name} –Ω–µ Excel (mimetype={mimetype})")
                return None

            excel_bytes = base64.b64decode(attachment.datas)
            return self._extract_text_from_excel_bytes(excel_bytes, attachment.name)

        except Exception as e:
            _logger.error(f"[extract_text_from_excel_attachment] –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {attachment and attachment.name}: {str(e)}")
            return None

    def extract_text_from_doc_attachment(self, attachment):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–∞—Ä—ã—Ö .doc —Ñ–∞–π–ª–æ–≤ (Microsoft Word 97-2003) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YandexGPT
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LibreOffice –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç
        """
        try:
            if not attachment or not attachment.datas:
                _logger.warning("[extract_text_from_doc_attachment] –ø—É—Å—Ç–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ")
                return None

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è/—Ç–∏–ø–æ–≤
            name_lower = (attachment.name or '').lower()
            mimetype = (attachment.mimetype or '').lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ .doc —Ñ–∞–π–ª (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
            if not (name_lower.endswith('.doc') or mimetype == 'application/msword'):
                _logger.info(f"[extract_text_from_doc_attachment] –≤–ª–æ–∂–µ–Ω–∏–µ {attachment.name} –Ω–µ DOC (mimetype={mimetype})")
                return None

            # –ò—Å–∫–ª—é—á–∞–µ–º .docx —Ñ–∞–π–ª—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
            if name_lower.endswith('.docx') or 'officedocument' in mimetype:
                _logger.info(f"[extract_text_from_doc_attachment] –≤–ª–æ–∂–µ–Ω–∏–µ {attachment.name} —è–≤–ª—è–µ—Ç—Å—è DOCX, –∞ –Ω–µ DOC")
                return None

            doc_bytes = base64.b64decode(attachment.datas)
            return self._extract_text_from_doc_using_libreoffice(doc_bytes, attachment.name)

        except Exception as e:
            _logger.error(f"[extract_text_from_doc_attachment] –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {attachment and attachment.name}: {str(e)}")
            return None

    def _extract_text_from_doc_using_libreoffice(self, doc_bytes, filename=None):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ .doc —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è LibreOffice –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç
        """
        if not doc_bytes:
            return None

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .doc —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.doc', delete=False) as doc_temp:
                doc_temp.write(doc_bytes)
                doc_path = doc_temp.name

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            out_dir = tempfile.mkdtemp()
            
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º .doc –≤ .txt –∏—Å–ø–æ–ª—å–∑—É—è LibreOffice
                cmd = [
                    'libreoffice', '--headless', '--convert-to', 'txt:Text', '--outdir', out_dir, doc_path
                ]
                _logger.info(f"[_extract_text_from_doc_using_libreoffice] –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
                
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
                if result.returncode != 0:
                    _logger.error(f"[_extract_text_from_doc_using_libreoffice] –û—à–∏–±–∫–∞ LibreOffice: {result.stderr}")
                    return None

                # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π .txt —Ñ–∞–π–ª
                txt_filename = os.path.splitext(os.path.basename(doc_path))[0] + '.txt'
                txt_path = os.path.join(out_dir, txt_filename)
                
                if not os.path.exists(txt_path):
                    _logger.error(f"[_extract_text_from_doc_using_libreoffice] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TXT —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {txt_path}")
                    return None

                # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
                with open(txt_path, 'r', encoding='utf-8', errors='ignore') as f:
                    text = f.read()
                
                if not text or not text.strip():
                    _logger.warning(f"[_extract_text_from_doc_using_libreoffice] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç –¥–ª—è —Ñ–∞–π–ª–∞ {filename}")
                    return None
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
                text = re.sub(r'\n{3,}', '\n\n', text)  # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                text = re.sub(r'[ \t]+', ' ', text)     # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
                text = text.strip()
                
                _logger.info(f"[_extract_text_from_doc_using_libreoffice] –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ {filename}: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return text if text else None
                
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.unlink(doc_path)
                except Exception:
                    pass
                try:
                    txt_filename = os.path.splitext(os.path.basename(doc_path))[0] + '.txt'
                    txt_path_cleanup = os.path.join(out_dir, txt_filename)
                    if os.path.exists(txt_path_cleanup):
                        os.unlink(txt_path_cleanup)
                    os.rmdir(out_dir)
                except Exception:
                    pass
                    
        except Exception as e:
            _logger.error(f"[_extract_text_from_doc_using_libreoffice] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOC —Ñ–∞–π–ª–∞: {str(e)}")
            return None

    @staticmethod
    def _extract_text_from_excel_bytes(excel_bytes, filename=None):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ Excel —Ñ–∞–π–ª–∞ –≤ –≤–∏–¥–µ –±–∞–π—Ç
        """
        if not excel_bytes or not OPENPYXL_AVAILABLE:
            return None

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è openpyxl
            with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as temp_file:
                temp_file.write(excel_bytes)
                temp_path = temp_file.name

            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ read-only —Ä–µ–∂–∏–º–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                workbook = load_workbook(temp_path, read_only=True, data_only=True)
                
                all_text_parts = []
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
                for sheet_name in workbook.sheetnames:
                    try:
                        worksheet = workbook[sheet_name]
                        sheet_parts = [f"=== –õ–∏—Å—Ç: {sheet_name} ==="]
                        
                        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
                        for row_index, row in enumerate(worksheet.iter_rows(values_only=True), 1):
                            if not row or all(cell is None or str(cell).strip() == '' for cell in row):
                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                            
                            row_parts = []
                            for col_index, cell_value in enumerate(row, 1):
                                if cell_value is not None and str(cell_value).strip():
                                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                                    formatted_value = str(cell_value).strip()
                                    row_parts.append(f"[{col_index}]: {formatted_value}")
                            
                            if row_parts:
                                sheet_parts.append(f"–°—Ç—Ä–æ–∫–∞ {row_index}: " + " | ".join(row_parts))
                        
                        if len(sheet_parts) > 1:  # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ª–∏—Å—Ç–∞
                            all_text_parts.extend(sheet_parts)
                            all_text_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ª–∏—Å—Ç–∞–º–∏
                            
                    except Exception as e:
                        _logger.warning(f"[_extract_text_from_excel_bytes] –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—Å—Ç–∞ '{sheet_name}': {str(e)}")
                        continue
                
                workbook.close()
                
                if not all_text_parts:
                    return None
                
                # –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
                text = '\n'.join(all_text_parts)
                
                # –ß–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                text = re.sub(r'\n{3,}', '\n\n', text)
                return text.strip() if text.strip() else None
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(temp_path)
                except Exception:
                    pass
                    
        except Exception as e:
            _logger.error(f"[_extract_text_from_excel_bytes] –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ Excel: {str(e)}")
            return None

    def _find_agent_signature_position_in_pdf(self, pdf_bytes):
        """
        –ò—â–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∞–≥–µ–Ω—Ç–∞ –≤ PDF –¥–æ–∫—É–º–µ–Ω—Ç–µ "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª".
        –ò—â–µ—Ç –¢–û–õ–¨–ö–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–ª–æ–∫–∏ —Å "–ê–ì–ï–ù–¢" + "–ü–æ–¥–ø–∏—Å—å:" –∏–ª–∏ "THE AGENT" + "By:".
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.
        """
        if not PYMUPDF_AVAILABLE or not pdf_bytes:
            return []
        
        matches = []
        try:
            doc = pymupdf.open(stream=pdf_bytes, filetype='pdf')
            
            for page_index in range(len(doc)):
                page = doc[page_index]
                text_dict = page.get_text('dict')
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                page_blocks = []
                for block in text_dict.get('blocks', []):
                    block_text = ''
                    block_bbox = None
                    
                    for line in block.get('lines', []):
                        for span in line.get('spans', []):
                            span_text = (span.get('text') or '').strip()
                            if span_text:
                                block_text += span_text + ' '
                                if block_bbox is None:
                                    block_bbox = span.get('bbox')
                    
                    if block_text.strip():
                        page_blocks.append({
                            'text': block_text.strip(),
                            'bbox': block_bbox
                        })
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                page_text = ' '.join([block['text'] for block in page_blocks])
                
                # –ò—â–µ–º –¢–û–õ–¨–ö–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–¥–ø–∏—Å–∏
                for block in page_blocks:
                    block_text = block['text']
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if any(word in block_text.upper() for word in ['–ê–ì–ï–ù–¢', 'THE AGENT', '–ü–û–î–ü–ò–°–¨', 'BY:']):
                        _logger.info(f"[DEBUG] Found potential signature block: '{block_text[:150]}'")
                    
                    # –°–¢–†–û–ì–ò–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã - –∏—â–µ–º —Ç–æ–ª—å–∫–æ –±–ª–æ–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –≤ –∫–æ–Ω—Ü–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    
                    # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –ë–ª–æ–∫ "–ü–†–ò–ù–¶–ò–ü–ê–õ" —Å –ø–æ–¥–ø–∏—Å—å—é (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
                    if '–ü–†–ò–ù–¶–ò–ü–ê–õ' in block_text and ('–ü–æ–¥–ø–∏—Å—å:' in block_text or 'By:' in block_text):
                        _logger.info(f"[SKIP] Skipping PRINCIPAL signature block: '{block_text[:50]}...'")
                        continue
                    
                    # –ü–∞—Ç—Ç–µ—Ä–Ω 2: –†—É—Å—Å–∫–∏–π –±–ª–æ–∫ –∞–≥–µ–Ω—Ç–∞ - –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å "–ê–ì–ï–ù–¢" + "–ü–æ–¥–ø–∏—Å—å:" + –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è + "–ú–ü"
                    russian_agent_signature = (
                        '–ê–ì–ï–ù–¢' in block_text and 
                        '–ü–æ–¥–ø–∏—Å—å:' in block_text and 
                        '_' in block_text and
                        '–ú–ü' in block_text and
                        '–î–∏—Ä–µ–∫—Ç–æ—Ä' in block_text  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    )
                    
                    # –ü–∞—Ç—Ç–µ—Ä–Ω 3: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –±–ª–æ–∫ –∞–≥–µ–Ω—Ç–∞ - –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å "THE AGENT" + "By:" + –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è + "Director"
                    english_agent_signature = (
                        'THE AGENT' in block_text and 
                        'By:' in block_text and 
                        '_' in block_text and
                        'Director' in block_text  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    )
                    
                    if russian_agent_signature or english_agent_signature:
                        _logger.info(f"[_find_agent_signature_position_in_pdf] Found AGENT signature block: '{block_text[:100]}...'")
                        _logger.info(f"[_find_agent_signature_position_in_pdf] Patterns - Russian: {russian_agent_signature}, English: {english_agent_signature}")
                        matches.append({
                            'page_number': page_index + 1,
                            'bbox': tuple(block['bbox']),
                            'text': block_text,
                            'is_russian': russian_agent_signature,
                            'is_english': english_agent_signature
                        })
            
            doc.close()
            _logger.info(f"[_find_agent_signature_position_in_pdf] Found {len(matches)} agent signature positions")
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –∫–∞–∫ fallback
            if not matches:
                _logger.warning("[_find_agent_signature_position_in_pdf] No matches with new logic, trying fallback...")
                matches = self._find_agent_signature_position_fallback(pdf_bytes)
            
        except Exception as e:
            _logger.error(f"[_find_agent_signature_position_in_pdf] Error searching for agent signature position: {e}")
        
        return matches
    
    def _find_agent_signature_position_fallback(self, pdf_bytes):
        """Fallback –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞"""
        if not PYMUPDF_AVAILABLE or not pdf_bytes:
            return []
        
        matches = []
        try:
            doc = pymupdf.open(stream=pdf_bytes, filetype='pdf')
            
            for page_index in range(len(doc)):
                page = doc[page_index]
                text_dict = page.get_text('dict')
                
                for block in text_dict.get('blocks', []):
                    for line in block.get('lines', []):
                        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏
                        line_text = ''
                        line_bbox = None
                        
                        for span in line.get('spans', []):
                            span_text = (span.get('text') or '').strip()
                            if span_text:
                                line_text += span_text + ' '
                                if line_bbox is None:
                                    line_bbox = span.get('bbox')
                        
                        line_text = line_text.strip()
                        
                        # –ë–û–õ–ï–ï –ò–ó–ë–ò–†–ê–¢–ï–õ–¨–ù–ê–Ø FALLBACK –õ–û–ì–ò–ö–ê
                        # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –∞–≥–µ–Ω—Ç–∞, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–ª–∞
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ü–†–ò–ù–¶–ò–ü–ê–õ
                        if '–ü–†–ò–ù–¶–ò–ü–ê–õ' in line_text or 'PRINCIPAL' in line_text:
                            continue
                            
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–±—â–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        if '–ê–ì–ï–ù–¢–°–ö–û–ú–£ –î–û–ì–û–í–û–†–£' in line_text or 'AGENCY CONTRACT' in line_text:
                            continue
                        
                        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–¥–ø–∏—Å–∏ –∞–≥–µ–Ω—Ç–∞
                        russian_agent_line = (
                            '–ê–ì–ï–ù–¢' in line_text and 
                            ('–ü–æ–¥–ø–∏—Å—å:' in line_text or ('_' in line_text and '–ú–ü' in line_text))
                        )
                        
                        english_agent_line = (
                            'THE AGENT' in line_text and 
                            ('By:' in line_text or '_' in line_text)
                        )
                        
                        # –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä—è–¥–æ–º –Ω–µ—Ç –ü–†–ò–ù–¶–ò–ü–ê–õ)
                        signature_line = (
                            ('–ü–æ–¥–ø–∏—Å—å:' in line_text or 'By:' in line_text) and 
                            '_' in line_text and
                            '–ü–†–ò–ù–¶–ò–ü–ê–õ' not in line_text and 'PRINCIPAL' not in line_text
                        )
                        
                        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å "–ê–ì–ï–ù–¢" (–¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ) –∏–ª–∏ "THE AGENT" (–¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ)
                        standalone_agent_russian = (
                            line_text.strip() == '–ê–ì–ï–ù–¢' or 
                            (line_text.strip().startswith('–ê–ì–ï–ù–¢') and len(line_text.strip()) < 10)
                        )
                        
                        standalone_agent_english = (
                            line_text.strip() == 'THE AGENT' or
                            (line_text.strip().startswith('THE AGENT') and len(line_text.strip()) < 15)
                        )
                        
                        if russian_agent_line or english_agent_line or signature_line or standalone_agent_russian or standalone_agent_english:
                            _logger.info(f"[FALLBACK] Found agent signature line: '{line_text}'")
                            if line_bbox:
                                matches.append({
                                    'page_number': page_index + 1,
                                    'bbox': tuple(line_bbox),
                                    'text': line_text,
                                    'is_russian': russian_agent_line or (signature_line and '–ü–æ–¥–ø–∏—Å—å:' in line_text) or standalone_agent_russian,
                                    'is_english': english_agent_line or (signature_line and 'By:' in line_text) or standalone_agent_english
                                })
            
            doc.close()
            _logger.info(f"[FALLBACK] Found {len(matches)} signature positions")
            
        except Exception as e:
            _logger.error(f"[FALLBACK] Error: {e}")
        
        return matches

    def _detect_agent_type_from_record(self):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª".
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–¢–î–ö', '–ò–ù–î–û –¢–†–ï–ô–î' –∏–ª–∏ '–°–¢–ï–õ–õ–ê–†'.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∑–∞–ø–∏—Å–∏
            agent_name = ''
            if self.agent_id and self.agent_id.name:
                agent_name = self.agent_id.name.upper()
            
            _logger.info(f"[_detect_agent_type_from_record] Agent name from record: '{agent_name}'")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if any(keyword in agent_name for keyword in ['–¢–î–ö', 'TDK']):
                return '–¢–î–ö'
            elif any(keyword in agent_name for keyword in ['–ò–ù–î–û', 'INDO', '–¢–†–ï–ô–î', 'TRADE']):
                return '–ò–ù–î–û –¢–†–ï–ô–î'
            elif any(keyword in agent_name for keyword in ['–°–¢–ï–õ–õ–ê–†', 'STELLAR']):
                return '–°–¢–ï–õ–õ–ê–†'
            else:
                _logger.info(f"[_detect_agent_type_from_record] Unknown agent type, defaulting to –°–¢–ï–õ–õ–ê–†")
                return '–°–¢–ï–õ–õ–ê–†'
                
        except Exception as e:
            _logger.error(f"[_detect_agent_type_from_record] Error detecting agent type: {e}")
            return '–°–¢–ï–õ–õ–ê–†'

    def _find_agent_signature_and_stamp_records(self, agent_type):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (signature_record, stamp_record).
        """
        if agent_type == '–¢–î–ö':
            search_terms = ['–¢–î–ö', 'TDK']
        elif agent_type == '–ò–ù–î–û –¢–†–ï–ô–î':
            search_terms = ['–ò–ù–û–¢–†–ï–ô–î', 'INDOTRADE', 'INDO']
        else:  # –°–¢–ï–õ–õ–ê–†
            search_terms = ['–°–¢–ï–õ–õ–ê–†', 'STELLAR']
        
        sig_record = None
        stamp_record = None
        
        # –ò—â–µ–º –ø–æ–¥–ø–∏—Å—å
        for term in search_terms:
            sig_record = self.env['signature.library'].search([
                ('name', 'ilike', term),
                ('signature_type', '=', 'signature'),
                ('active', '=', True)
            ], limit=1)
            if sig_record:
                break
        
        # –ò—â–µ–º –ø–µ—á–∞—Ç—å
        for term in search_terms:
            stamp_record = self.env['signature.library'].search([
                ('name', 'ilike', term),
                ('signature_type', '=', 'stamp'),
                ('active', '=', True)
            ], limit=1)
            if stamp_record:
                break
        
        _logger.info(f"[_find_agent_signature_and_stamp_records] Found signature: {sig_record.name if sig_record else 'None'}")
        _logger.info(f"[_find_agent_signature_and_stamp_records] Found stamp: {stamp_record.name if stamp_record else 'None'}")
        
        return sig_record, stamp_record

    def _sign_individual_document(self, pdf_bytes, agent_type):
        """
        –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª" –ø–æ–¥–ø–∏—Å—å—é –∏ –ø–µ—á–∞—Ç—å—é –∞–≥–µ–Ω—Ç–∞.
        –ò—â–µ—Ç –º–µ—Å—Ç–∞ —Å "–ê–ì–ï–ù–¢"/"THE AGENT" –∏ "–ü–æ–¥–ø–∏—Å—å:"/"By:" –∏ —Å—Ç–∞–≤–∏—Ç –ø–æ–¥–ø–∏—Å–∏ –ø—Ä–∞–≤–µ–µ.
        """
        _logger.info(f"[_sign_individual_document] Starting signature process for agent type: {agent_type}")
        
        if not PYMUPDF_AVAILABLE or not pdf_bytes:
            _logger.warning("[_sign_individual_document] PyMuPDF not available or no PDF data")
            return pdf_bytes
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            _logger.info("[_sign_individual_document] Searching for signature positions...")
            matches = self._find_agent_signature_position_in_pdf(pdf_bytes)
            _logger.info(f"[_sign_individual_document] Found {len(matches)} signature positions")
            
            if not matches:
                _logger.warning("[_sign_individual_document] No agent signature positions found - returning unsigned PDF")
                return pdf_bytes
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏
            sig_record, stamp_record = self._find_agent_signature_and_stamp_records(agent_type)
            if not sig_record or not stamp_record:
                _logger.warning(f"[_sign_individual_document] {agent_type} signature/stamp not found")
                return pdf_bytes
            
            doc = pymupdf.open(stream=pdf_bytes, filetype='pdf')
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            pages_to_sign = {}
            for match in matches:
                page_num = match['page_number'] - 1
                if page_num not in pages_to_sign:
                    pages_to_sign[page_num] = []
                pages_to_sign[page_num].append(match)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            for page_num, page_matches in pages_to_sign.items():
                page = doc[page_num]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –±–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∏
                for match in page_matches:
                    text = match['text']
                    bbox = match['bbox']
                    
                    _logger.info(f"[_sign_individual_document] Processing signature block: '{text[:50]}...'")
                    
                    # –†–∞–∑–º–µ—Ä—ã –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏
                    sig_w = sig_record.default_width or 120
                    sig_h = sig_record.default_height or 40
                    stamp_w = stamp_record.default_width or 80
                    stamp_h = stamp_record.default_height or 80
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
                    if match.get('is_russian'):
                        if '–ü–æ–¥–ø–∏—Å—å:' in text:
                            # –°—Ç—Ä–æ–∫–∞ —Å "–ü–æ–¥–ø–∏—Å—å: _______"
                            sig_x = bbox[0] + 80   # –ü–æ—Å–ª–µ "–ü–æ–¥–ø–∏—Å—å:"
                            sig_y = bbox[1] - 5    # –ù–∞ —Ç–æ–π –∂–µ –≤—ã—Å–æ—Ç–µ
                            
                            # –ü–µ—á–∞—Ç—å –ø—Ä–∞–≤–µ–µ –ø–æ–¥–ø–∏—Å–∏, –≥–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–ú–ü"
                            stamp_x = bbox[0] + 250  # –ì–¥–µ –æ–±—ã—á–Ω–æ "–ú–ü"
                            stamp_y = bbox[1] - 10   # –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                        else:
                            # –°—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Å "–ê–ì–ï–ù–¢" - –∏—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –Ω–∏–∂–µ
                            sig_x = bbox[0] + 80   # –û—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
                            sig_y = bbox[3] + 10   # –ù–∏–∂–µ —Å—Ç—Ä–æ–∫–∏ "–ê–ì–ï–ù–¢"
                            
                            # –ü–µ—á–∞—Ç—å –ø—Ä–∞–≤–µ–µ
                            stamp_x = sig_x + sig_w + 30
                            stamp_y = sig_y - 5
                        
                    elif match.get('is_english'):
                        if 'By:' in text:
                            # –°—Ç—Ä–æ–∫–∞ —Å "By: _______"
                            sig_x = bbox[0] + 50   # –ü–æ—Å–ª–µ "By:"
                            sig_y = bbox[1] - 5    # –ù–∞ —Ç–æ–π –∂–µ –≤—ã—Å–æ—Ç–µ
                            
                            # –ü–µ—á–∞—Ç—å –ø—Ä–∞–≤–µ–µ –ø–æ–¥–ø–∏—Å–∏, –≥–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "Stamp"
                            stamp_x = bbox[0] + 200  # –ì–¥–µ –æ–±—ã—á–Ω–æ "Stamp"
                            stamp_y = bbox[1] - 10   # –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                        else:
                            # –°—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Å "THE AGENT" - –∏—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –Ω–∏–∂–µ
                            sig_x = bbox[0] + 50   # –û—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
                            sig_y = bbox[3] + 10   # –ù–∏–∂–µ —Å—Ç—Ä–æ–∫–∏ "THE AGENT"
                            
                            # –ü–µ—á–∞—Ç—å –ø—Ä–∞–≤–µ–µ
                            stamp_x = sig_x + sig_w + 30
                            stamp_y = sig_y - 5
                    
                    else:
                        # Fallback –ø–æ–∑–∏—Ü–∏—è
                        sig_x = bbox[0] + 50
                        sig_y = bbox[1]
                        stamp_x = sig_x + sig_w + 20
                        stamp_y = sig_y - 5
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    _logger.info(f"[_sign_individual_document] Text: '{text[:50]}...'")
                    _logger.info(f"[_sign_individual_document] BBox: {bbox}")
                    _logger.info(f"[_sign_individual_document] Signature position: ({sig_x}, {sig_y}) size: {sig_w}x{sig_h}")
                    _logger.info(f"[_sign_individual_document] Stamp position: ({stamp_x}, {stamp_y}) size: {stamp_w}x{stamp_h}")
                    
                    # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                    sig_rect = pymupdf.Rect(sig_x, sig_y, sig_x + sig_w, sig_y + sig_h)
                    page.insert_image(sig_rect, stream=base64.b64decode(sig_record.image))
                    
                    # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—á–∞—Ç—å
                    stamp_rect = pymupdf.Rect(stamp_x, stamp_y, stamp_x + stamp_w, stamp_y + stamp_h)
                    page.insert_image(stamp_rect, stream=base64.b64decode(stamp_record.image))
                    
                    _logger.info(f"[_sign_individual_document] Added {agent_type} signature and stamp on page {page_num + 1}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π PDF
            signed_pdf_bytes = doc.write()
            doc.close()
            
            _logger.info(f"[_sign_individual_document] Successfully signed individual document with {agent_type} signatures")
            return signed_pdf_bytes
            
        except Exception as e:
            _logger.error(f"[_sign_individual_document] Error signing individual document: {e}")
            return pdf_bytes