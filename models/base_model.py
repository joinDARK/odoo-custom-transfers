# models/base_model.py
from odoo import models, api, fields
from odoo.tools import html_escape
import logging
import json

_logger = logging.getLogger(__name__)

class AmanatBaseModel(models.AbstractModel):
    _name = 'amanat.base.model'
    _description = 'Base Model for Logging and Real-time Updates'

    def open_form(self):
        return {
            'type': 'ir.actions.act_window',
            'res_model': self._name,
            'view_mode': 'form',
            'res_id': self.id,
            'target': 'current',
        }

    def open_form_new_tab(self):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
        url = f"{base_url}/web#id={self.id}&view_type=form&model={self._name}"
        
        return {
            'type': 'ir.actions.act_url',
            'url': url,
            'target': 'new',  # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ/–≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
        }

    def open_form_modal(self):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ"""
        return {
            'type': 'ir.actions.act_window',
            'res_model': self._name,
            'view_mode': 'form',
            'res_id': self.id,
            'target': 'new',  # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            'name': f'{self.display_name}',
        }

    def open_form_new_tab_js(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ —á–µ—Ä–µ–∑ JavaScript"""
        return {
            'type': 'ir.actions.client',
            'tag': 'open_form_new_tab',
            'params': {
                'model': self._name,
                'res_id': self.id,
                'view_mode': 'form',
            }
        }

    def _should_log(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"""
        return (
            not self.env.context.get('no_log') and 
            self._name != 'amanat.activity' and
            'amanat.activity' in self.env.registry
        )

    def _get_realtime_fields(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –Ω–∞—Å–ª–µ–¥—É–µ–º—ã—Ö –º–æ–¥–µ–ª—è—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        basic_fields = ['id', 'display_name', 'create_date', 'write_date']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        common_fields = ['name', 'state', 'active', 'date', 'amount', 'currency']
        for field in common_fields:
            if field in self._fields:
                basic_fields.append(field)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (tracking=True)
        for field_name, field in self._fields.items():
            if hasattr(field, 'tracking') and field.tracking and field_name not in basic_fields:
                basic_fields.append(field_name)
        
        return basic_fields

    def _get_record_data_for_realtime(self, record):
        """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –¥–ª—è —á—Ç–µ–Ω–∏—è
            fields_to_read = record._get_realtime_fields()
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            fields_to_read = list(set(fields_to_read))
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = record.read(fields_to_read)[0] if record.exists() else {}
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Many2one –ø–æ–ª—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            for field_name, field in record._fields.items():
                if field_name in data and field.type == 'many2one' and data[field_name]:
                    if isinstance(data[field_name], (list, tuple)) and len(data[field_name]) == 2:
                        data[field_name] = {
                            'id': data[field_name][0],
                            'display_name': data[field_name][1]
                        }
            
            return data
        except Exception as e:
            _logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏ –¥–ª—è real-time: {e}")
            return {'id': record.id, 'display_name': record.display_name}

    def _send_realtime_notification(self, action, changed_fields=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        # try:
            # _logger.info(f"üî• _send_realtime_notification called: action={action}, model={self._name}, records={len(self)}")
            # _logger.info(f"üî• Changed fields: {changed_fields}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∏–∑ res.users
            # self.env.user.notify_record_change(action, self, changed_fields)
            
            # _logger.info("üî• notify_record_change completed successfully")
            
        # except Exception as e:
        #     _logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        #     import traceback
        #     _logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

    def _log_activity(self, action, changes=None):
        if not self._should_log():
            return
        
        try:
            for record in self:
                data = {
                    'name': record.display_name,
                    'model': record._name,
                    'id': record.id,
                }

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º no_log
                self.env['amanat.activity'].with_context(no_log=True).sudo().create({
                    'action': action,
                    'model_name': record._name,
                    'record_id': record.id,
                    'record_name': record.display_name,
                    'user_id': self.env.uid,
                    'changes': changes,
                    'data': html_escape(str(data)),
                })
        except Exception as e:
            _logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    @api.model_create_multi
    def create(self, vals_list):
        user = self.env.user
        
        for vals in vals_list:
            if user.has_group('amanat.group_amanat_manager'):
                # –î–ª—è –º–æ–¥–µ–ª–∏ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º manager_ids (Many2many)
                if self._name == 'amanat.zayavka' and 'manager_ids' in self._fields:
                    # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    manager = self.env['amanat.manager'].find_or_create_manager(user.id)
                    
                    if manager:
                        vals['manager_ids'] = [(4, manager.id)]  # –î–æ–±–∞–≤–ª—è–µ–º –≤ Many2many
                        _logger.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä {manager.name} (ID: {manager.id}) –¥–ª—è –∑–∞—è–≤–∫–∏")
                    else:
                        _logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}")
                
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º manager_id (Many2one)
                elif 'manager_id' in self._fields:
                    vals['manager_id'] = user.id
        
        records = super().create(vals_list)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–æ–≥–∏
        if self._should_log():
            for record in records:
                record._log_activity('create')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
        if records:
            records._send_realtime_notification('create')
        
        return records

    def write(self, vals):
        # _logger.info(f"üî• BASE_MODEL WRITE CALLED: model={self._name}, vals={vals}")
        # _logger.info(f"üî• Records count: {len(self)}")
        
        changed_fields = list(vals.keys())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_values = {}
        if self._should_log():
            for record in self:
                old_values[record.id] = {}
                for field in changed_fields:
                    old_values[record.id][field] = getattr(record, field, None)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        result = super().write(vals)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if self._should_log():
            for record in self:
                if record.id in old_values:
                    changes = []
                    for field, new_value in vals.items():
                        old_value = old_values[record.id].get(field)
                        if field in record._fields:
                            # –î–ª—è Many2one –ø–æ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–∞
                            if record._fields[field].type == 'many2one':
                                old_display = old_value.display_name if old_value else '–ù–µ –∑–∞–¥–∞–Ω–æ'
                                new_display = getattr(record, field).display_name if getattr(record, field) else '–ù–µ –∑–∞–¥–∞–Ω–æ'
                                changes.append(f"{field}: {old_display} ‚Üí {new_display}")
                            else:
                                changes.append(f"{field}: {old_value} ‚Üí {new_value}")
                    
                    if changes:
                        record._log_activity('update', "\n".join(changes))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.exists():
            self._send_realtime_notification('update', changed_fields=changed_fields)
        
        return result

    def unlink(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        log_data = []
        records_for_notification = self
        
        if self._should_log():
            for record in self:
                data = {
                    'name': record.display_name,
                    'model': record._name,
                    'id': record.id,
                }
                log_data.append(data)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏
        result = super().unlink()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        if self._should_log() and log_data:
            try:
                for data in log_data:
                    self.env['amanat.activity'].with_context(no_log=True).sudo().create({
                        'action': 'delete',
                        'model_name': data['model'],
                        'record_id': data['id'],
                        'record_name': data['name'],
                        'data': html_escape(str(data)),
                        'user_id': self.env.uid,
                    })
            except Exception as e:
                _logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        # try:
        #     self.env.user.notify_record_change('delete', records_for_notification, None)
        # except Exception as e:
        #     _logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        
        return result