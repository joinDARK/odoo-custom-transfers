from odoo import models, fields, api


class ResUsers(models.Model):
    
    _inherit = 'res.users'
    
    #----------------------------------------------------------
    # Properties
    #----------------------------------------------------------
    
    @property
    def SELF_READABLE_FIELDS(self):
        return super().SELF_READABLE_FIELDS + [
            'sidebar_type',
        ]

    @property
    def SELF_WRITEABLE_FIELDS(self):
        return super().SELF_WRITEABLE_FIELDS + [
            'sidebar_type',
        ]

    #----------------------------------------------------------
    # Fields
    #----------------------------------------------------------
    
    sidebar_type = fields.Selection(
        selection=[
            ('invisible', 'Invisible'),
            ('small', 'Small'),
            ('large', 'Large')
        ], 
        string="Sidebar Type",
        default='large',
        required=True,
    )

    #----------------------------------------------------------
    # Methods
    #----------------------------------------------------------
    
    @api.model
    def check_user_groups(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ–Ω—é"""
        user = self.env.user
        return {
            'is_manager': user.has_group('amanat.group_amanat_manager'),
            'is_senior_manager': user.has_group('amanat.group_amanat_senior_manager'),
            'is_fin_manager': user.has_group('amanat.group_amanat_fin_manager'),
            'is_fin_manager_jess': user.has_group('amanat.group_amanat_fin_manager_jess'),
            'is_director': user.has_group('amanat.group_amanat_director'),
            'is_admin': user.has_group('amanat.group_amanat_admin'),
            'is_inspector': user.has_group('amanat.group_amanat_inspector'),
            'is_transit_only': user.has_group('amanat.group_amanat_transit_only'),
            'is_treasurer': user.has_group('amanat.group_amanat_treasurer'),
            'is_dilara': user.name == '–î–∏–ª—è—Ä–∞',  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            'user_name': user.name,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            # –ù–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            'is_vera_findir': user.has_group('amanat.group_amanat_vera_findir'),
            'is_venera_analytics': user.has_group('amanat.group_amanat_venera_analytics'),
            'is_khalida_analytics': user.has_group('amanat.group_amanat_khalida_analytics'),
            'is_elina_manager': user.has_group('amanat.group_amanat_elina_manager_dashboard'),
            'is_alina_manager': user.has_group('amanat.group_amanat_alina_manager_files'),
        }

    def write(self, vals):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É"""
        res = super().write(vals)
        
        # –ï—Å–ª–∏ –∏–∑–º–µ–Ω—è—é—Ç—Å—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if 'groups_id' in vals:
            for user in self:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–ª–∏ —Å—Ç–∞—Ä—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                if user.has_group('amanat.group_amanat_manager') or user.has_group('amanat.group_amanat_senior_manager'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    existing_manager = self.env['amanat.manager'].search([('user_id', '=', user.id)], limit=1)
                    if not existing_manager:
                        try:
                            manager = self.env['amanat.manager'].create([{
                                'name': user.name,
                                'user_id': user.id,
                            }])
                            import logging
                            _logger = logging.getLogger(__name__)
                            _logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä {manager.name} (ID: {manager.id}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}")
                        except Exception as e:
                            import logging
                            _logger = logging.getLogger(__name__)
                            _logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}: {e}")
        
        return res

    #----------------------------------------------------------
    # Real-time notification methods
    #----------------------------------------------------------
    
    def _get_interested_users(self, model=None):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –≤ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø amanat
            amanat_group_ids = []
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã amanat
            for group_xml_id in [
                'amanat.group_amanat_admin',
                'amanat.group_amanat_manager', 
                'amanat.group_amanat_senior_manager',
                'amanat.group_amanat_inspector'
            ]:
                try:
                    group = self.env.ref(group_xml_id)
                    if group:
                        amanat_group_ids.append(group.id)
                except:
                    continue
            
            if amanat_group_ids:
                amanat_users = self.env['res.users'].search([
                    ('active', '=', True),
                    ('groups_id', 'in', amanat_group_ids),
                    # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–µ–∂–±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                ])
            else:
                # –ï—Å–ª–∏ –≥—Ä—É–ø–ø amanat –Ω–µ—Ç, –±–µ—Ä–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                amanat_users = self.env['res.users'].search([
                    ('active', '=', True),
                    # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–µ–∂–±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                ])
            
            return amanat_users
        except Exception as e:
            import logging
            _logger = logging.getLogger(__name__)
            _logger.error(f"Error getting interested users: {e}")
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return self.env['res.users'].search([
                ('active', '=', True),
                # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–µ–∂–±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            ])

    def _bus_send_to_user(self, user, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ bus —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            import logging
            _logger = logging.getLogger(__name__)
            
            # –ü–æ–ª—É—á–∞–µ–º partner –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Odoo 18
            partner = user.partner_id
            _logger.info(f"üì§ Sending bus message to partner {partner.id} ({user.name})")
            
            # –î–ª—è Odoo 18 –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ simple_notification
            simple_notification = {
                'type': 'simple_notification',
                'title': f'Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç {message.get("user_name", "—Å–∏—Å—Ç–µ–º—ã")}',
                'message': f'–û–±–Ω–æ–≤–ª–µ–Ω {message.get("model_display_name", "–æ–±—ä–µ–∫—Ç")}: {len(message.get("records", []))} –∑–∞–ø–∏—Å–µ–π',
                'sticky': False,
                'warning': False,
            }
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ partner_id
                self.env['bus.bus']._sendone(partner, 'simple_notification', simple_notification)
                _logger.info(f"‚úÖ Standard notification sent to partner {partner.id}")
            except Exception as e1:
                _logger.warning(f"‚ö†Ô∏è Standard notification failed: {e1}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            custom_channel = f"amanat_realtime_{user.id}"
            
            # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            custom_message = {
                'type': 'amanat_realtime_update',
                'data': message,
                'user_id': user.id,
                'timestamp': message.get('timestamp')
            }
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–Ω–∞–ª (—Ç–æ–ª—å–∫–æ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞!)
                self.env['bus.bus']._sendone(custom_channel, custom_message)
                _logger.info(f"‚úÖ Custom channel message sent to {custom_channel}")
            except Exception as e2:
                _logger.warning(f"‚ö†Ô∏è Custom channel failed: {e2}")
                
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ß–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (res.users,id)
            user_channel = f"res.users,{user.id}"
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.env['bus.bus']._sendone(user_channel, message)
                _logger.info(f"‚úÖ User channel message sent to {user_channel}")
            except Exception as e3:
                _logger.warning(f"‚ö†Ô∏è User channel failed: {e3}")
            
            _logger.info(f"‚úÖ Bus messages sent successfully to user {user.name}")
            
        except Exception as e:
            import logging
            _logger = logging.getLogger(__name__)
            _logger.error(f"‚ùå Error sending bus message to user {user.name}: {e}")
            import traceback
            _logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

    def _send_realtime_notification(self, message_type, model, records_data, changed_fields=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        import logging
        _logger = logging.getLogger(__name__)
        
        try:
            _logger.info(f"üîî _send_realtime_notification: type={message_type}, model={model}")
            
            notification_data = {
                'type': message_type,
                'model': model,
                'model_display_name': self.env[model]._description if model in self.env else model,
                'user_id': self.id,
                'user_name': self.name,
                'timestamp': fields.Datetime.now().isoformat(),
                'records': records_data,
                'changed_fields': changed_fields or []
            }
            
            _logger.info(f"üìã Notification data prepared: {notification_data}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            interested_users = self._get_interested_users(model)
            
            _logger.info(f"üë• Found {len(interested_users)} interested users for model {model}")
            _logger.info(f"üë• Interested users: {[u.name for u in interested_users]}")
            
            if not interested_users:
                _logger.warning("‚ö†Ô∏è No interested users found - notification will not be sent")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 
            for user in interested_users:
                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ
                # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É: if user.id == self.id: continue
                
                _logger.info(f"üì§ Sending notification to user: {user.name} (ID: {user.id})")
                self._bus_send_to_user(user, notification_data)
            
            _logger.info("‚úÖ All notifications sent successfully")
            
        except Exception as e:
            _logger.error(f"‚ùå Error sending realtime notification: {e}")
            import traceback
            _logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

    def notify_record_change(self, action, records, changed_fields=None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info(f"üöÄ notify_record_change called: action={action}, records={len(records) if records else 0}")
        
        if not records:
            _logger.warning("‚ö†Ô∏è No records provided to notify_record_change")
            return
            
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–µ–π
        records_data = []
        for record in records:
            try:
                record_data = {
                    'id': record.id,
                    'display_name': record.display_name
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if hasattr(record, '_get_realtime_fields'):
                    fields_to_read = record._get_realtime_fields()
                else:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è
                    fields_to_read = ['name', 'state', 'create_date', 'write_date']
                
                _logger.info(f"üîç Reading fields for record {record.id}: {fields_to_read}")
                
                for field_name in fields_to_read:
                    if field_name in record._fields and hasattr(record, field_name):
                        try:
                            value = getattr(record, field_name)
                            if field_name.endswith('_id') and hasattr(value, 'display_name'):
                                record_data[field_name] = {
                                    'id': value.id,
                                    'display_name': value.display_name
                                }
                            else:
                                record_data[field_name] = value
                        except:
                            continue
                
                records_data.append(record_data)
                _logger.info(f"‚úÖ Prepared record data: {record_data}")
                
            except Exception as e:
                _logger.error(f"‚ùå Error preparing record data for {record}: {e}")
                continue
        
        if records_data:
            _logger.info(f"üì§ Sending notification with {len(records_data)} records")
            self._send_realtime_notification(action, records._name, records_data, changed_fields)
        else:
            _logger.warning("‚ö†Ô∏è No records data prepared for notification") 