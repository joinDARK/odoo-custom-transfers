# amanat/models/writeoff.py

from odoo import models, fields, api
from odoo.exceptions import ValidationError
import logging

_logger = logging.getLogger(__name__)

class WriteOff(models.Model):
    _name = 'amanat.writeoff'
    _inherit = ['amanat.base.model', "mail.thread", "mail.activity.mixin"]
    _description = '–°–ø–∏—Å–∞–Ω–∏—è'

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–ª–µ-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä ¬´Id –°–ø–∏—Å–∞–Ω–∏—è¬ª (–≤–º–µ—Å—Ç–æ name)
    # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞—Ç—å –µ–≥–æ name, –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
    id_spisaniya = fields.Char(
        string="Id –°–ø–∏—Å–∞–Ω–∏—è", 
        tracking=True,
        default=lambda self: self.env['ir.sequence'].next_by_code('amanat.writeoff.sequence')
    )

    date = fields.Date(
        string="–î–∞—Ç–∞", 
        tracking=True,
        default=fields.Date.today,
    )
    amount = fields.Float(string="–°—É–º–º–∞", tracking=True)

    sender_id = fields.Many2one(
        'amanat.contragent', 
        string='–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å',
        tracking=True,
    )
    sender_payer_id = fields.Many2one(
        'amanat.payer',
        string='–ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è',
        tracking=True,
        domain="[('contragents_ids', 'in', sender_id)]"
    )
    sender_wallet_id = fields.Many2one('amanat.wallet', string='–ö–æ—à–µ–ª–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è', tracking=True)

    @api.onchange('sender_id')
    def _onchange_sender_id(self):
        if self.sender_id:
            payer = self.env['amanat.payer'].search(
                [('contragents_ids', 'in', self.sender_id.id)], limit=1)
            self.sender_payer_id = payer.id if payer else False
        else:
            self.sender_payer_id = False

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å "amanat.money" (–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä)
    money_id = fields.Many2one(
        'amanat.money',
        string='–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä',
        tracking=True,
        ondelete='cascade',
    )

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å "amanat.investment"
    investment_ids = fields.Many2many(
        'amanat.investment',
        'amanat_investment_writeoff_rel', 
        'writeoff_id',
        'investment_id',
        string="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
        tracking=True,
    )

    # –°–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    writeoff_investment = fields.Boolean(
        string="–°–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π",
        default=False,
        tracking=True,
    )

    @api.model
    def process_write_off(self):
        """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ:
        - –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        - –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–æ–ª–≥–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        """

        self.ensure_one()

        investment = self.investment_ids
        if not investment:
            raise ValidationError("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è")

        order = investment.orders[:1]
        if not order:
            raise ValidationError("–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞")

        money_records = order.money_ids
        if not money_records:
            raise ValidationError("–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")

        valid_container = money_records.filtered(
            lambda m: not m.percent and not m.royalty and m.state != 'debt'
        )[:1]
        if not valid_container:
            raise ValidationError("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")

        self.money_id = valid_container.id  # üü¢ Many2one

        debt_container = money_records.filtered(lambda m: m.state == 'debt')[:1]
        if not debt_container:
            raise ValidationError("–ù–µ –Ω–∞–π–¥–µ–Ω –¥–æ–ª–≥–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")

        self.create({
            'amount': -self.amount,
            'date': self.date,
            'money_id': debt_container.id,
            'investment_ids': [(6, 0, [investment.id])],
        })

        return True

    def create_transfer_after_writeoff(self): # TODO –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ '–ü–µ—Ä–µ–≤–æ–¥' (amanat.transfer) –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.
        """
        self.ensure_one()

        if not self.sender_id or not self.sender_payer_id or not self.sender_wallet_id:
            raise ValidationError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")

        if not self.investment_ids:
            raise ValidationError("–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")

        investment = self.investment_ids[:1]

        if not investment.recipient_id or not investment.recipient_payer_id or not investment.currency:
            raise ValidationError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ –≤–∞–ª—é—Ç—ã")

        # –ù–∞–π—Ç–∏ –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
        recipient_wallet = self.env['amanat.wallet'].search([('name', '=', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')], limit=1)
        if not recipient_wallet:
            raise ValidationError("–ö–æ—à–µ–ª–µ–∫ '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω")

        transfer = self.env['amanat.transfer'].create({
            'date': self.date,
            'currency': investment.currency,
            'amount': self.amount,
            'sender_id': self.sender_id.id,
            'sender_payer_id': self.sender_payer_id.id,
            'sender_wallet_id': self.sender_wallet_id.id,
            'recipient_id': investment.recipient_id.id,
            'recipient_payer_id': investment.recipient_payer_id.id,
            'recipient_wallet_id': recipient_wallet.id,
        })

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫–±–æ–∫—Å
        transfer.create_order = True

        return transfer

    @api.model
    def create(self, vals):
        rec = super().create(vals)
        if rec.writeoff_investment:
            rec.process_write_off()
            rec.writeoff_investment = False
        return rec

    def write(self, vals):
        res = super().write(vals)
        if vals.get('writeoff_investment'):
            for rec in self.filtered('writeoff_investment'):
                rec.process_write_off()  # üü¢ –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                rec.writeoff_investment = False
        return res
