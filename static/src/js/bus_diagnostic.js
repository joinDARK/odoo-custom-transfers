/** @odoo-module **/

import { registry } from "@web/core/registry";

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è bus —Å–∏—Å—Ç–µ–º—ã
const busDiagnosticService = {
    dependencies: ["bus_service"],
    
    start(env, { bus_service }) {
        console.log("üîç BUS DIAGNOSTIC: Service starting...");
        
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        window.diagnoseBus = () => {
            console.log("üîç BUS DIAGNOSTIC: Starting diagnosis...");
            console.log("üîç Bus service object:", bus_service);
            console.log("üîç Bus service methods:", Object.getOwnPropertyNames(bus_service));
            console.log("üîç Bus service prototype:", Object.getOwnPropertyNames(Object.getPrototypeOf(bus_service)));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            if (bus_service.channels) {
                console.log("üîç Current channels:", bus_service.channels);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            const userId = window.odoo?.session_info?.uid || 2;
            const userChannel = `res.users,${userId}`;
            console.log(`üîç Expected user channel: ${userChannel}`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            try {
                if (typeof bus_service.addChannel === 'function') {
                    bus_service.addChannel(userChannel);
                    console.log("‚úÖ addChannel method available and called");
                } else {
                    console.log("‚ùå addChannel method not available");
                }
            } catch (error) {
                console.log("‚ùå addChannel failed:", error);
            }
            
            console.log("üîç BUS DIAGNOSTIC: Diagnosis completed");
        };
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –í–°–ï bus —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        try {
            bus_service.addEventListener("notification", ({ detail: notifications }) => {
                console.log("üîç BUS DIAGNOSTIC: ANY notification received!");
                console.log("üîç Notification count:", notifications.length);
                
                for (let i = 0; i < notifications.length; i++) {
                    const notification = notifications[i];
                    console.log(`üîç Notification ${i + 1}:`, notification);
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                    if (Array.isArray(notification)) {
                        console.log(`üîç Array format: [${notification.join(', ')}]`);
                    } else if (typeof notification === 'object') {
                        console.log("üîç Object keys:", Object.keys(notification));
                        console.log("üîç Object values:", Object.values(notification));
                    }
                }
            });
            
            console.log("‚úÖ Bus diagnostic listener added");
            
        } catch (error) {
            console.error("‚ùå Failed to add bus diagnostic listener:", error);
        }
        
        console.log("üîç BUS DIAGNOSTIC: Service started");
        console.log("üîç Use window.diagnoseBus() to run diagnosis");
        
        return {};
    }
};

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
registry.category("services").add("bus_diagnostic", busDiagnosticService);

console.log("üîç BUS DIAGNOSTIC: Service registered"); 