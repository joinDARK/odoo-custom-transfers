/** @odoo-module **/

import { Component, onMounted, onWillStart, useState } from "@odoo/owl";
import { registry } from "@web/core/registry";
import { useService } from "@web/core/utils/hooks";

/**
 * –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç, –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –∏ –±–∞–ª–∞–Ω—Å–∞–º–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
 */
export class AnalyticsDashboard extends Component {
    static template = "amanat.AnalyticsDashboard";
    
    setup() {
        this.orm = useService("orm");
        this.actionService = useService("action");
        this.notificationService = useService("notification");
        
        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–ª—è –¥–∞—Ç –ø—É—Å—Ç—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
        this.state = useState({
            loading: false,
            dateFrom: '', // –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
            dateTo: '',   // –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
            currencyRates: null,
            contragentsBalance: null,
            contragentsComparison: null,
            balanceSearchQuery: '',
            comparisonSearchQuery: '',
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –±–∞–ª–∞–Ω—Å–æ–≤
            balanceSortField: null,
            balanceSortDirection: 'desc', // 'desc' = –±–æ–ª—å—à–∏–π –∫ –º–µ–Ω—å—à–µ–º—É, 'asc' = –º–µ–Ω—å—à–∏–π –∫ –±–æ–ª—å—à–µ–º—É
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparisonSortField: null,
            comparisonSortDirection: 'desc',
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
            loadingRates: false,
            // –û–±—â–∞—è —Å—É–º–º–∞ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–æ–≤ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
            totalBalanceSummary: null,
            loadingTotalSummary: false,
            // –û—Ç–¥–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparisonDateFrom1: '1970-01-01', // –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ —Å 1970)
            comparisonDateTo1: '',              // –¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparisonDateFrom2: '1970-01-01', // –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ —Å 1970)
            comparisonDateTo2: ''               // –¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        });
        
        onWillStart(this.willStart);
        onMounted(this.mounted);
    }
    
    async willStart() {
        // üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: —Å–Ω–∞—á–∞–ª–∞ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üöÄ Starting optimized dashboard loading...');
        
        await Promise.all([
            this.loadDashboardData(),
            this.loadCurrencyRates(), // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å—Ä–∞–∑—É
        ]);
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–Ω–∏–≤–æ –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        console.log('‚úÖ Critical data loaded, defer loading heavy data');
    }
    
    async mounted() {
        console.log('Analytics Dashboard mounted with data:', {
            dateFrom: this.state.dateFrom,
            dateTo: this.state.dateTo,
            currencyRates: this.state.currencyRates,
            contragentsBalance: this.state.contragentsBalance?.length || 0,
            contragentsComparison: this.state.contragentsComparison?.length || 0
        });
        
        // üöÄ –õ–ï–ù–ò–í–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—è–∂–µ–ª—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(async () => {
            console.log('üîÑ Loading heavy dashboard data lazily...');
            await Promise.all([
                this.loadTotalBalanceSummaryOptimized(),
                this.loadContragentsBalanceOptimized(),
                this.loadContragentsComparison()
            ]);
            console.log('‚úÖ All dashboard data loaded');
        }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ UI
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
     */
    async loadDashboardData() {
        this.state.loading = true;
        try {
            const result = await this.orm.call(
                'amanat.analytics_dashboard',
                'get_analytics_data',
                [], 
                {
                    date_from: this.state.dateFrom,
                    date_to: this.state.dateTo
                }
            );
            console.log('Dashboard data loaded:', result);
        } catch (error) {
            console.error('Error loading dashboard data:', error);
            this.notificationService.add("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", {
                type: "danger",
            });
        } finally {
            this.state.loading = false;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
     */
    async loadCurrencyRates() {
        try {
            const result = await this.orm.call(
                'amanat.analytics_dashboard',
                'get_currency_rates',
                []
            );
            
            if (result.success && result.data) {
                this.state.currencyRates = result.data;
                console.log('Currency rates loaded:', this.state.currencyRates);
            } else {
                console.warn('No currency rates data received');
            }
        } catch (error) {
            console.error('Error loading currency rates:', error);
            this.notificationService.add("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç", {
                type: "warning",
            });
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏–∑ API
     */
    async loadCurrencyRatesFromApi(showNotifications = true) {
        this.state.loadingRates = true;
        try {
            const result = await this.orm.call(
                'amanat.analytics_dashboard',
                'get_currency_rates_from_api',
                []
            );
            
            if (result.success && result.data) {
                this.state.currencyRates = result.data;
                
                console.log('üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç API:', result.data);
                
                if (showNotifications) {
                    this.notificationService.add("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", {
                        type: "success",
                    });
                }
            } else {
                console.warn('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –æ—Ç API:', result.error);
                
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç API, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                await this.loadCurrencyRatesFallback();
                
                if (showNotifications) {
                    this.notificationService.add(result.error || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç API", {
                        type: "warning",
                    });
                }
            }
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.loadCurrencyRatesFallback();
            
            if (showNotifications) {
                this.notificationService.add(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: ${error.message}`, {
                    type: "danger",
                });
            }
        } finally {
            this.state.loadingRates = false;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç fallback (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
     */
    async loadCurrencyRatesFallback() {
        try {
            const result = await this.orm.call(
                'amanat.analytics_dashboard',
                'get_currency_rates',
                []
            );
            
            if (result.success && result.data) {
                this.state.currencyRates = result.data;
                console.log('Fallback currency rates loaded:', this.state.currencyRates);
            }
        } catch (error) {
            console.error('Error loading fallback currency rates:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î)
     */
    async loadContragentsBalance() {
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã
            const params = {};
            if (this.state.dateFrom && this.state.dateFrom.trim()) {
                params.date_from = this.state.dateFrom;
            }
            if (this.state.dateTo && this.state.dateTo.trim()) {
                params.date_to = this.state.dateTo;
            }
            
            const result = await this.orm.call(
                'amanat.analytics_dashboard',
                'get_contragents_balance',
                [],
                params
            );
            
            if (result.success && result.data) {
                this.state.contragentsBalance = result.data;
                console.log('Contragents balance loaded:', this.state.contragentsBalance.length, 'records');
            } else {
                console.warn('No contragents balance data received');
            }
        } catch (error) {
            console.error('Error loading contragents balance:', error);
            this.notificationService.add("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤", {
                type: "warning",
            });
        }
    }
    
    /**
     * üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
     */
    async loadContragentsBalanceOptimized() {
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã
            const params = {};
            if (this.state.dateFrom && this.state.dateFrom.trim()) {
                params.date_from = this.state.dateFrom;
            }
            if (this.state.dateTo && this.state.dateTo.trim()) {
                params.date_to = this.state.dateTo;
            }
            
            console.log('üöÄ Loading optimized contragents balance...');
            
            const result = await this.orm.call(
                'amanat.analytics_dashboard',
                'get_contragents_balance_optimized',
                [],
                params
            );
            
            if (result.success && result.data) {
                this.state.contragentsBalance = result.data;
                console.log('‚úÖ Optimized contragents balance loaded:', this.state.contragentsBalance.length, 'records');
            } else {
                console.warn('No optimized contragents balance data received');
            }
        } catch (error) {
            console.error('Error loading optimized contragents balance:', error);
            this.notificationService.add("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤", {
                type: "warning",
            });
        }
    }
    
             /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–π —Å—É–º–º—ã —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–æ–≤ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î)
     */
    async loadTotalBalanceSummary() {
        this.state.loadingTotalSummary = true;
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã
            const params = {};
            if (this.state.dateFrom && this.state.dateFrom.trim()) {
                params.date_from = this.state.dateFrom;
            }
            if (this.state.dateTo && this.state.dateTo.trim()) {
                params.date_to = this.state.dateTo;
            }
            
            const result = await this.orm.call(
                'amanat.analytics_dashboard',
                'get_total_balance_summary',
                [],
                params
            );
            
            if (result.success) {
                this.state.totalBalanceSummary = result;
                console.log('Total balance summary loaded:', result);
            } else {
                console.warn('No total balance summary data received');
            }
        } catch (error) {
            console.error('Error loading total balance summary:', error);
            this.notificationService.add("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–π —Å—É–º–º—ã", {
                type: "warning",
            });
        } finally {
            this.state.loadingTotalSummary = false;
        }
    }
    
    /**
     * üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–π —Å—É–º–º—ã —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–æ–≤ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
     */
    async loadTotalBalanceSummaryOptimized() {
        this.state.loadingTotalSummary = true;
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã
            const params = {};
            if (this.state.dateFrom && this.state.dateFrom.trim()) {
                params.date_from = this.state.dateFrom;
            }
            if (this.state.dateTo && this.state.dateTo.trim()) {
                params.date_to = this.state.dateTo;
            }
            
            console.log('üöÄ Loading optimized total balance summary...');
            
            const result = await this.orm.call(
                'amanat.analytics_dashboard',
                'get_total_balance_summary_optimized',
                [],
                params
            );
            
            if (result.success) {
                this.state.totalBalanceSummary = result;
                console.log('‚úÖ Optimized total balance summary loaded:', result);
            } else {
                console.warn('No optimized total balance summary data received');
            }
        } catch (error) {
            console.error('Error loading optimized total balance summary:', error);
            this.notificationService.add("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–π —Å—É–º–º—ã", {
                type: "warning",
            });
        } finally {
            this.state.loadingTotalSummary = false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    async loadContragentsComparison() {
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const params = {};
            
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if (this.state.comparisonDateFrom1 && this.state.comparisonDateFrom1.trim()) {
                params.date_from1 = this.state.comparisonDateFrom1;
            }
            if (this.state.comparisonDateTo1 && this.state.comparisonDateTo1.trim()) {
                params.date_to1 = this.state.comparisonDateTo1;
            }
            
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if (this.state.comparisonDateFrom2 && this.state.comparisonDateFrom2.trim()) {
                params.date_from2 = this.state.comparisonDateFrom2;
            }
            if (this.state.comparisonDateTo2 && this.state.comparisonDateTo2.trim()) {
                params.date_to2 = this.state.comparisonDateTo2;
            }
            
            const result = await this.orm.call(
                'amanat.analytics_dashboard',
                'get_contragents_balance_comparison',
                [],
                params
            );
           
           if (result.success && result.data) {
               this.state.contragentsComparison = result.data;
               console.log('Contragents comparison loaded:', this.state.contragentsComparison.length, 'records');
           } else {
               console.warn('No contragents comparison data received');
           }
       } catch (error) {
           console.error('Error loading contragents comparison:', error);
           this.notificationService.add("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", {
               type: "warning",
           });
       }
   }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
     */
    async onDateFromChange(ev) {
        console.log('üîÑ Date from changed:', this.state.dateFrom);
        console.log('‚ö° Using optimized loading methods...');
        await Promise.all([
            this.loadDashboardData(),
            this.loadTotalBalanceSummaryOptimized(),
            this.loadContragentsBalanceOptimized(),
            this.loadContragentsComparison()
        ]);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞
     */
    async onDateToChange(ev) {
        console.log('üîÑ Date to changed:', this.state.dateTo);
        console.log('‚ö° Using optimized loading methods...');
        await Promise.all([
            this.loadDashboardData(),
            this.loadTotalBalanceSummaryOptimized(),
            this.loadContragentsBalanceOptimized(),
            this.loadContragentsComparison()
        ]);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    async onComparisonDateTo1Change(ev) {
        console.log('Comparison date to 1 changed:', this.state.comparisonDateTo1);
        // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è 1970-01-01
        this.state.comparisonDateFrom1 = '1970-01-01';
        await this.loadContragentsComparison();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    async onComparisonDateTo2Change(ev) {
        console.log('Comparison date to 2 changed:', this.state.comparisonDateTo2);
        // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è 1970-01-01
        this.state.comparisonDateFrom2 = '1970-01-01';
        await this.loadContragentsComparison();
    }
    

    

    

    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –±–∞–ª–∞–Ω—Å–æ–≤
     */
    get filteredContragentsBalance() {
        if (!this.state.contragentsBalance) return [];
        
        // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        let filteredData = this.state.contragentsBalance;
        if (this.state.balanceSearchQuery.trim()) {
            const query = this.state.balanceSearchQuery.toLowerCase().trim();
            filteredData = filteredData.filter(contragent =>
                contragent.name.toLowerCase().includes(query)
            );
        }
        
        // –ó–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞
        if (this.state.balanceSortField) {
            filteredData = [...filteredData].sort((a, b) => {
                let aValue = a[this.state.balanceSortField];
                let bValue = b[this.state.balanceSortField];
                
                // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞
                if (this.state.balanceSortField !== 'name') {
                    aValue = parseFloat(aValue) || 0;
                    bValue = parseFloat(bValue) || 0;
        }
        
                let comparison = 0;
                if (aValue > bValue) comparison = 1;
                if (aValue < bValue) comparison = -1;
                
                return this.state.balanceSortDirection === 'desc' ? -comparison : comparison;
            });
        }
        
        return filteredData;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    get filteredContragentsComparison() {
        if (!this.state.contragentsComparison) return [];
            
        // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        let filteredData = this.state.contragentsComparison;
        if (this.state.comparisonSearchQuery.trim()) {
            const query = this.state.comparisonSearchQuery.toLowerCase().trim();
            filteredData = filteredData.filter(contragent =>
                contragent.name.toLowerCase().includes(query)
            );
    }
    
        // –ó–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞
        if (this.state.comparisonSortField) {
            filteredData = [...filteredData].sort((a, b) => {
                let aValue = a[this.state.comparisonSortField];
                let bValue = b[this.state.comparisonSortField];
                
                // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞
                if (this.state.comparisonSortField !== 'name') {
                    aValue = parseFloat(aValue) || 0;
                    bValue = parseFloat(bValue) || 0;
                }
                
                let comparison = 0;
                if (aValue > bValue) comparison = 1;
                if (aValue < bValue) comparison = -1;
                
                return this.state.comparisonSortDirection === 'desc' ? -comparison : comparison;
            });
        }
        
        return filteredData;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –±–∞–ª–∞–Ω—Å–æ–≤
     */
    onBalanceSearchChange(ev) {
        console.log('Balance search changed:', this.state.balanceSearchQuery);
}

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    onComparisonSearchChange(ev) {
        console.log('Comparison search changed:', this.state.comparisonSearchQuery);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
     */
    async onRefreshRatesClick() {
        console.log('Refresh rates button clicked - resetting to API rates');
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫—É—Ä—Å—ã –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º
        await this.resetToApiRates();
        
        // üöÄ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        await Promise.all([
            this.loadTotalBalanceSummaryOptimized(),
            this.loadContragentsBalanceOptimized(),
            this.loadContragentsComparison()
        ]);
        
        console.log('Data reloaded with fresh API currency rates');
    }
    
    /**
     * –°–±—Ä–æ—Å –∫ API –∫—É—Ä—Å–∞–º (—É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫—É—Ä—Å—ã)
     */
    async resetToApiRates() {
        this.state.loadingRates = true;
        try {
            const result = await this.orm.call(
                'amanat.analytics_dashboard',
                'reset_currency_rates',
                []
            );
            
            if (result.success && result.data) {
                this.state.currencyRates = result.data;
                
                this.notificationService.add("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å API", {
                    type: "success",
                });
                
                console.log('Currency rates reset to API values');
            } else {
                this.notificationService.add(result.error || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –æ—Ç API", {
                    type: "danger",
                });
            }
        } catch (error) {
            console.error('Error resetting currency rates:', error);
            this.notificationService.add(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: ${error.message}`, {
                type: "danger",
            });
        } finally {
            this.state.loadingRates = false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –±–∞–ª–∞–Ω—Å–æ–≤
     */
    getBalanceSortIcon(fieldName) {
        if (this.state.balanceSortField !== fieldName) {
            return '‚áÖ'; // –ù–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ - –¥–≤–æ–π–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞
        }
        return this.state.balanceSortDirection === 'desc' ? '‚Üì' : '‚Üë';
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    getComparisonSortIcon(fieldName) {
        if (this.state.comparisonSortField !== fieldName) {
            return '‚áÖ'; // –ù–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ - –¥–≤–æ–π–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞
        }
        return this.state.comparisonSortDirection === 'desc' ? '‚Üì' : '‚Üë';
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –±–∞–ª–∞–Ω—Å–æ–≤
     */
    onBalanceHeaderClick(fieldName) {
        console.log('Balance header clicked:', fieldName);
        
        if (this.state.balanceSortField === fieldName) {
            // –ï—Å–ª–∏ —É–∂–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (this.state.balanceSortDirection === 'desc') {
                // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ –±—ã–ª desc, —Ç–µ–ø–µ—Ä—å asc
                this.state.balanceSortDirection = 'asc';
            } else if (this.state.balanceSortDirection === 'asc') {
                // –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ –±—ã–ª asc, —Ç–µ–ø–µ—Ä—å —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
                this.state.balanceSortField = null;
                this.state.balanceSortDirection = 'desc';
            }
        } else {
            // –ï—Å–ª–∏ –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–±–æ–ª—å—à–µ–µ –∫ –º–µ–Ω—å—à–µ–º—É)
            this.state.balanceSortField = fieldName;
            this.state.balanceSortDirection = 'desc';
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    onComparisonHeaderClick(fieldName) {
        console.log('Comparison header clicked:', fieldName);
        
        if (this.state.comparisonSortField === fieldName) {
            // –ï—Å–ª–∏ —É–∂–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (this.state.comparisonSortDirection === 'desc') {
                // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ –±—ã–ª desc, —Ç–µ–ø–µ—Ä—å asc
                this.state.comparisonSortDirection = 'asc';
            } else if (this.state.comparisonSortDirection === 'asc') {
                // –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ –±—ã–ª asc, —Ç–µ–ø–µ—Ä—å —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
                this.state.comparisonSortField = null;
                this.state.comparisonSortDirection = 'desc';
            }
        } else {
            // –ï—Å–ª–∏ –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–±–æ–ª—å—à–µ–µ –∫ –º–µ–Ω—å—à–µ–º—É)
            this.state.comparisonSortField = fieldName;
            this.state.comparisonSortDirection = 'desc';
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
     */
    async onCurrencyRateChange(ev) {
        console.log('Currency rate changed, auto-saving...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
        if (this.saveTimeout) {
            clearTimeout(this.saveTimeout);
        }
        
        this.saveTimeout = setTimeout(async () => {
            await this.autoSaveCurrencyRates();
        }, 500); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 500–º—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    }
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
     */
    async autoSaveCurrencyRates() {
        try {
            const result = await this.orm.call(
                'amanat.analytics_dashboard',
                'save_user_currency_rates',
                [],
                {
                    rates: this.state.currencyRates
                }
            );
            
            if (result.success) {
                // üöÄ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å—ã —Å –Ω–æ–≤—ã–º–∏ –∫—É—Ä—Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                await Promise.all([
                    this.loadTotalBalanceSummaryOptimized(),
                    this.loadContragentsBalanceOptimized(),
                    this.loadContragentsComparison()
                ]);
                
                console.log('Currency rates auto-saved successfully');
            } else {
                this.notificationService.add(result.error || "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç", {
                    type: "danger",
                });
            }
        } catch (error) {
            console.error('Error auto-saving currency rates:', error);
            this.notificationService.add(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`, {
                type: "danger",
            });
        }
    }

}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
registry.category("actions").add("analytics_dashboard_action", AnalyticsDashboard); 


