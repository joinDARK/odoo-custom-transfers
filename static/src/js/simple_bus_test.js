/** @odoo-module **/

import { registry } from "@web/core/registry";

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è bus –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
const simpleBusTestService = {
    dependencies: ["bus_service", "notification"],
    
    start(env, { bus_service, notification }) {
        console.log("üß™ Simple Bus Test Service starting...");
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –í–°–ï–• bus —Å–æ–æ–±—â–µ–Ω–∏–π
        bus_service.addEventListener("notification", ({ detail: notifications }) => {
            console.log("üß™ SIMPLE BUS TEST: Received notifications:", notifications);
            
            for (const notification of notifications) {
                console.log("üß™ SIMPLE BUS TEST: Processing:", notification);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                if (Array.isArray(notification)) {
                    console.log(`üß™ Array format: [${notification.join(", ")}]`);
                    // –ò—â–µ–º amanat –≤ –ª—é–±–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –º–∞—Å—Å–∏–≤–∞
                    for (let i = 0; i < notification.length; i++) {
                        const item = notification[i];
                        if (typeof item === 'string' && item.includes('amanat')) {
                            console.log("üéØ Found amanat in array item:", item, "at index", i);
                        } else if (typeof item === 'object' && item && JSON.stringify(item).includes('amanat')) {
                            console.log("üéØ Found amanat in object:", item, "at index", i);
                        }
                    }
                } else if (typeof notification === 'object' && notification) {
                    console.log("üß™ Object format:", Object.keys(notification));
                    const jsonStr = JSON.stringify(notification);
                    if (jsonStr.includes('amanat')) {
                        console.log("üéØ Found amanat in object notification:", notification);
                    }
                }
            }
        });
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        window.testBusSimple = () => {
            console.log("üß™ SIMPLE TEST: Testing bus reception...");
            notification.add("–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Bus –∑–∞–ø—É—â–µ–Ω! –°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å.", {
                type: "info",
                title: "Bus –¢–µ—Å—Ç"
            });
        };
        
        window.testCreateRecord = async () => {
            console.log("üß™ SIMPLE TEST: Creating test record...");
            try {
                const result = await env.services.rpc("/amanat/test_bus", {});
                console.log("üß™ SIMPLE TEST: RPC result:", result);
                notification.add("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞! –°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å.", {
                    type: "success",
                    title: "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"
                });
            } catch (error) {
                console.error("üß™ SIMPLE TEST ERROR:", error);
                notification.add(`–û—à–∏–±–∫–∞: ${error.message}`, {
                    type: "danger",
                    title: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞"
                });
            }
        };
        
        console.log("üß™ Simple Bus Test Service started");
        console.log("üß™ Simple Bus Test functions registered:");
        console.log("üß™ - window.testBusSimple()");
        console.log("üß™ - window.testCreateRecord()");
        
        return {};
    }
};

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
registry.category("services").add("simple_bus_test", simpleBusTestService);

console.log("üß™ Simple Bus Test Service registered"); 