/** @odoo-module **/

import { registry } from "@web/core/registry";
import { useService } from "@web/core/utils/hooks";

/**
 * Client action –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ —á—Ç–æ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ - –ø—Ä—è–º—ã–µ ORM –≤—ã–∑–æ–≤—ã
 */
registry.category("actions").add("refresh_rates_action", async (env, action) => {
    const orm = env.services.orm;
    const notification = env.services.notification;
    
    // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
    if (action.params && action.params.console_messages) {
        console.group("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç");
        
        action.params.console_messages.forEach(message => {
            if (message.includes('‚ùå') || message.includes('üí•')) {
                console.error(message);
            } else if (message.includes('‚ö†Ô∏è')) {
                console.warn(message);
            } else if (message.includes('‚úÖ') || message.includes('üéâ')) {
                console.info(message);
            } else {
                console.log(message);
            }
        });
        
        console.groupEnd();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (action.params) {
        notification.add(
            action.params.message || "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
            {
                title: action.params.title || "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                type: action.params.type || "info",
                sticky: action.params.sticky || false,
            }
        );
    }
    
    // üöÄ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ (—É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º Odoo)
    if (action.params && action.params.type === 'success' && action.params.updated_rates) {
        console.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏...");
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            if (env.services && env.services.action) {
                const currentController = env.services.action.currentController;
                if (currentController && currentController.props && currentController.props.resId) {
                    const resId = currentController.props.resId;
                    
                    console.info(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ñ–æ—Ä–º–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ ${resId}...`);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ action
                    const updatedRates = action.params.updated_rates[resId];
                    if (updatedRates) {
                        // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∫—É—Ä—Å–æ–≤ –≤ DOM (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π)
                        const updateField = (fieldName, value) => {
                            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                            let fieldElement = document.querySelector(`[name="${fieldName}"] input`);
                            let isInputField = true;
                            
                            if (!fieldElement) {
                                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞–∫ span –∏–ª–∏ div –¥–ª—è readonly –ø–æ–ª–µ–π
                                fieldElement = document.querySelector(`[name="${fieldName}"] span, [name="${fieldName}"] .o_field_widget`);
                                isInputField = false;
                            }
                            
                            if (!fieldElement) {
                                // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—è
                                fieldElement = document.querySelector(`[name="${fieldName}"]`);
                                isInputField = fieldElement && fieldElement.tagName === 'INPUT';
                            }
                            
                            if (fieldElement) {
                                const displayValue = value || '';
                                
                                if (isInputField) {
                                    fieldElement.value = displayValue;
                                    fieldElement.dispatchEvent(new Event('change', { bubbles: true }));
                                    fieldElement.dispatchEvent(new Event('input', { bubbles: true }));
                                } else {
                                    fieldElement.textContent = displayValue;
                                    // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å innerHTML
                                    if (fieldElement.innerHTML !== undefined) {
                                        fieldElement.innerHTML = displayValue;
                                    }
                                }
                                
                                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è best_rate_name
                                if (fieldName === 'best_rate_name') {
                                    console.info(`üéØ BEST_RATE_NAME –æ–±–Ω–æ–≤–ª–µ–Ω–æ: "${displayValue}" (—ç–ª–µ–º–µ–Ω—Ç: ${fieldElement.tagName})`);
                                } else {
                                    console.info(`‚úÖ –ü–æ–ª–µ ${fieldName} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${displayValue}`);
                                }
                                return true;
                            } else {
                                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—è ${fieldName}`);
                                return false;
                            }
                        };
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∫—É—Ä—Å–æ–≤
                        if (updatedRates.cb_rate !== null) {
                            updateField('cb_rate', updatedRates.cb_rate);
                        }
                        if (updatedRates.investing_rate !== null) {
                            updateField('investing_rate', updatedRates.investing_rate);
                        }
                        
                        // üöÄ –ü–†–ò–û–†–ò–¢–ï–¢–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º "–õ—É—á—à–∏–π –∫—É—Ä—Å –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" (important!)
                        if (updatedRates.best_rate_name !== undefined) {
                            console.info(`üéØ –û–±–Ω–æ–≤–ª—è–µ–º –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ï –ø–æ–ª–µ best_rate_name: "${updatedRates.best_rate_name}"`);
                            const success = updateField('best_rate_name', updatedRates.best_rate_name);
                            if (!success) {
                                console.error(`‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –æ–±–Ω–æ–≤–∏—Ç—å best_rate_name!`);
                            }
                        }
                        
                        // üöÄ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º—ã–µ –ø–æ–ª—è (–∫–∞–∫ –≤ –¥–∞—à–±–æ—Ä–¥–∞—Ö)
                        const dependentFields = [
                            'best_rate', 
                            'effective_rate',
                            'our_client_reward',
                            'client_reward',
                            'non_our_client_reward',
                            'total_client',
                            'partner_post_conversion_rate'
                        ];
                        
                        dependentFields.forEach(fieldName => {
                            if (updatedRates[fieldName] !== undefined && updatedRates[fieldName] !== null) {
                                const success = updateField(fieldName, updatedRates[fieldName]);
                                if (success) {
                                    console.info(`‚úÖ –ó–∞–≤–∏—Å–∏–º–æ–µ –ø–æ–ª–µ ${fieldName} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedRates[fieldName]}`);
                                } else {
                                    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ ${fieldName}`);
                                }
                            }
                        });
                        
                        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: —Ç—Ä–∏–≥–≥–µ—Ä–∏–º reload –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ DOM –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
                        setTimeout(async () => {
                            if (currentController.model && currentController.model.root) {
                                try {
                                    await currentController.model.root.load();
                                    console.info("‚úÖ –ú–æ–¥–µ–ª—å —Ñ–æ—Ä–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
                                } catch (modelError) {
                                    console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å:", modelError);
                                }
                            }
                        }, 100);
                        
                        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
                        const updatedFieldsCount = dependentFields.filter(field =>
                            updatedRates[field] !== undefined && updatedRates[field] !== null
                        ).length + 
                        (updatedRates.cb_rate !== null ? 1 : 0) + 
                        (updatedRates.investing_rate !== null ? 1 : 0) +
                        (updatedRates.best_rate_name !== undefined ? 1 : 0); // –£—á–∏—Ç—ã–≤–∞–µ–º best_rate_name
                        
                        notification.add(`–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ ${updatedFieldsCount} –ø–æ–ª–µ–π (–≤–∫–ª—é—á–∞—è "–õ—É—á—à–∏–π –∫—É—Ä—Å –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")`, {
                            type: "success",
                            sticky: false,
                        });
                    } else {
                        console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö");
                    }
                } else {
                    console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏");
                }
            } else {
                console.warn("‚ö†Ô∏è Action service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã:", error);
            console.info("üí° –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É");
            
            // Fallback –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            notification.add("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", {
                type: "warning",
                sticky: true,
            });
        }
    } else {
        console.info("‚ö†Ô∏è –ö—É—Ä—Å—ã –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏ - –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ");
    }
    
    return Promise.resolve();
});