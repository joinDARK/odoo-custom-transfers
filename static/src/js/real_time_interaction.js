/** @odoo-module **/

import { registry } from "@web/core/registry";
import { browser } from "@web/core/browser/browser";
import { session } from "@web/session";
import { makeContext } from "@web/core/context";
import { useService } from "@web/core/utils/hooks";

// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
const editingStateService = {
    dependencies: [],
    
    start() {
        const editingRecords = new Map(); // model_name:record_id -> user_info
        const editingNotifications = new Map(); // notification_id -> record_info
        
        return {
            setRecordEditing(model, recordId, userInfo) {
                const key = `${model}:${recordId}`;
                editingRecords.set(key, userInfo);
            },
            
            getRecordEditor(model, recordId) {
                const key = `${model}:${recordId}`;
                return editingRecords.get(key);
            },
            
            clearRecordEditing(model, recordId) {
                const key = `${model}:${recordId}`;
                editingRecords.delete(key);
            },
            
            addEditingNotification(notificationId, recordInfo) {
                editingNotifications.set(notificationId, recordInfo);
            },
            
            removeEditingNotification(notificationId) {
                editingNotifications.delete(notificationId);
            }
        };
    }
};

// –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è Odoo 18
const amanatRealTimeService = {
    dependencies: ["bus_service", "action", "notification", "orm"],
    
    start(env, { bus_service, action, notification, orm }) {
        console.log("üöÄ Amanat Real-Time Service for Odoo 18 starting...");
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Odoo 18
        let currentUserId = null;
        
        try {
            // –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ env.services.user (–æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è Odoo 18)
            if (env.services.user && env.services.user.userId) {
                currentUserId = env.services.user.userId;
                console.log("üîç Method 1: Got user ID from env.services.user:", currentUserId);
            }
            
            // –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ window.odoo.session_info
            if (!currentUserId && window.odoo && window.odoo.session_info) {
                currentUserId = window.odoo.session_info.uid || window.odoo.session_info.user_id;
                console.log("üîç Method 2: Got user ID from window.odoo.session_info:", currentUserId);
            }
            
            // –°–ø–æ—Å–æ–± 3: –ß–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é session
            if (!currentUserId && typeof session !== 'undefined') {
                currentUserId = session.user_id || session.uid;
                console.log("üîç Method 3: Got user ID from global session:", currentUserId);
            }
            
            // –°–ø–æ—Å–æ–± 4: –ß–µ—Ä–µ–∑ env.services (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏)
            if (!currentUserId) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
                    const userService = env.services.user || env.services.auth || env.services.userService;
                    if (userService) {
                        currentUserId = userService.userId || userService.user?.id || userService.uid;
                        console.log("üîç Method 4: Got user ID from alternative services:", currentUserId);
                    }
                } catch (e) {
                    console.warn("üîç Method 4 failed:", e);
                }
            }
            
            // –°–ø–æ—Å–æ–± 5: –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ cookie –∏–ª–∏ localStorage
            if (!currentUserId) {
                try {
                    const sessionData = localStorage.getItem('session_info') || sessionStorage.getItem('session_info');
                    if (sessionData) {
                        const parsed = JSON.parse(sessionData);
                        currentUserId = parsed.uid || parsed.user_id;
                        console.log("üîç Method 5: Got user ID from storage:", currentUserId);
                    }
                } catch (e) {
                    console.warn("üîç Method 5 failed:", e);
                }
            }
            
            // –°–ø–æ—Å–æ–± 6: –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ DOM –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if (!currentUserId) {
                try {
                    const metaElements = document.querySelectorAll('meta[name="user-id"], meta[name="uid"], meta[name="current-user"]');
                    for (const meta of metaElements) {
                        if (meta.content) {
                            currentUserId = parseInt(meta.content);
                            console.log("üîç Method 6: Got user ID from meta tags:", currentUserId);
                            break;
                        }
                    }
                } catch (e) {
                    console.warn("üîç Method 6 failed:", e);
                }
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log("üîç DEBUG: Available data sources:");
            console.log("  - env.services.user:", env.services.user);
            console.log("  - window.odoo:", window.odoo);
            console.log("  - global session:", typeof session !== 'undefined' ? session : 'undefined');
            console.log("  - env.services keys:", Object.keys(env.services));
            
        } catch (e) {
            console.warn("üîç Error getting user ID:", e);
        }
        
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
        if (!currentUserId) {
            console.warn("üîç Could not determine user ID, using fallback for testing");
            currentUserId = 2; // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
        
        console.log("üÜî Final user ID:", currentUserId);
        
        if (!currentUserId) {
            console.error("‚ùå Cannot start real-time service without user ID");
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ RPC
            console.log("üîç Trying to get user ID via RPC...");
            
            env.services.rpc("/web/session/get_session_info", {}).then((sessionInfo) => {
                console.log("üîç RPC session info:", sessionInfo);
                if (sessionInfo && (sessionInfo.uid || sessionInfo.user_id)) {
                    const userId = sessionInfo.uid || sessionInfo.user_id;
                    console.log("‚úÖ Got user ID via RPC:", userId);
                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º ID
                    startRealtimeService(userId, env, bus_service, action, notification, orm);
                } else {
                    console.error("‚ùå Could not get user ID via RPC either");
                }
            }).catch((error) => {
                console.error("‚ùå RPC failed:", error);
            });
            
            return {
                getCurrentUserId: () => null,
                sendTestMessage: () => console.log("üß™ Service not started - no user ID")
            };
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
        return startRealtimeService(currentUserId, env, bus_service, action, notification, orm);
    },
};

// –í—ã–Ω–µ—Å–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
function startRealtimeService(currentUserId, env, bus_service, action, notification, orm) {
    console.log("üöÄ Starting realtime service with user ID:", currentUserId);
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ Odoo 18 API
    try {
        // –ö–∞–Ω–∞–ª 1: –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        const customChannel = `amanat_realtime_${currentUserId}`;
        console.log(`üì° Subscribing to custom channel: ${customChannel}`);
        
        bus_service.subscribe(customChannel, (payload) => {
            console.log("üéØ CUSTOM CHANNEL MESSAGE:", payload);
            handleRealtimeMessage(payload, env);
        });
        
        // –ö–∞–Ω–∞–ª 2: –õ–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userChannel = `res.users,${currentUserId}`;
        console.log(`üì° Subscribing to user channel: ${userChannel}`);
        
        bus_service.subscribe(userChannel, (payload) => {
            console.log("üéØ USER CHANNEL MESSAGE:", payload);
            handleRealtimeMessage(payload, env);
        });
        
        // –ö–∞–Ω–∞–ª 3: –û–±—â–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –≤—Å–µ—Ö amanat –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        const generalChannel = "amanat_general_updates";
        console.log(`üì° Subscribing to general channel: ${generalChannel}`);
        
        bus_service.subscribe(generalChannel, (payload) => {
            console.log("üéØ GENERAL CHANNEL MESSAGE:", payload);
            handleRealtimeMessage(payload, env);
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º bus —Å–µ—Ä–≤–∏—Å (–≤–∞–∂–Ω–æ –¥–ª—è Odoo 18!)
        bus_service.start();
        console.log("‚úÖ Bus service started");
        
    } catch (error) {
        console.error("‚ùå Error setting up bus subscriptions:", error);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ real-time —Å–æ–æ–±—â–µ–Ω–∏–π
    function handleRealtimeMessage(payload, env) {
        console.log("üî• HANDLING REAL-TIME MESSAGE:", payload);
        console.log("üî• Message type:", typeof payload);
        console.log("üî• Message keys:", payload ? Object.keys(payload) : 'null');
        
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
            let messageData = payload;
            
            if (payload.data) {
                messageData = payload.data;
                console.log("üî• Using payload.data:", messageData);
            } else if (payload.type === 'amanat_realtime_update') {
                messageData = payload;
                console.log("üî• Direct amanat_realtime_update:", messageData);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (messageData && (
                messageData.type === 'amanat_realtime_update' ||
                (messageData.model && messageData.model.includes('amanat')) ||
                (messageData.type && ['create', 'update', 'delete'].includes(messageData.type))
            )) {
                console.log("‚úÖ Valid amanat real-time message detected");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                showNotification(messageData, notification);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                updateInterface(messageData, env);
                
            } else {
                console.log("üîç Not an amanat real-time message:", messageData);
            }
            
        } catch (error) {
            console.error("‚ùå Error handling real-time message:", error);
        }
    }
    
    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    function showNotification(messageData, notification) {
        try {
            const actionText = {
                'create': '—Å–æ–∑–¥–∞–ª',
                'update': '–æ–±–Ω–æ–≤–∏–ª',
                'delete': '—É–¥–∞–ª–∏–ª'
            }[messageData.type] || '–∏–∑–º–µ–Ω–∏–ª';
            
            const userName = messageData.user_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            const recordsCount = messageData.records ? messageData.records.length : 1;
            const modelName = messageData.model_display_name || messageData.model || '–æ–±—ä–µ–∫—Ç';
            
            const message = `${userName} ${actionText} ${recordsCount} –∑–∞–ø–∏—Å–µ–π –≤ ${modelName}`;
            
            if (notification && notification.add) {
                notification.add(message, {
                    title: "üîÑ Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                    type: "info",
                    sticky: false
                });
            }
            
            console.log("üì¢ Notification shown:", message);
            
        } catch (error) {
            console.error("‚ùå Error showing notification:", error);
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    function updateInterface(messageData, env) {
        try {
            console.log("üîÑ Updating interface for:", messageData);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ/–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            const currentAction = env.services.action?.currentController?.action;
            const currentModel = currentAction?.res_model;
            
            console.log("üîÑ Current model:", currentModel);
            console.log("üîÑ Message model:", messageData.model);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
            if (currentModel && messageData.model && currentModel === messageData.model) {
                console.log("‚úÖ Models match, updating interface");
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                const viewType = currentAction?.view_mode?.split(',')[0] || 'unknown';
                console.log("üîÑ Current view type:", viewType);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                switch (viewType) {
                    case 'list':
                        updateListView(messageData);
                        break;
                    case 'form':
                        updateFormView(messageData);
                        break;
                    case 'kanban':
                        updateKanbanView(messageData);
                        break;
                    default:
                        console.log(`üîÑ View type ${viewType} not supported for updates`);
                }
            } else {
                console.log("üîÑ Models don't match, skipping interface update");
            }
            
        } catch (error) {
            console.error("‚ùå Error updating interface:", error);
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ List View
    function updateListView(messageData) {
        console.log("üìã Updating list view");
        
        try {
            const listContainer = document.querySelector('.o_list_view table tbody');
            if (!listContainer) {
                console.log("üìã List container not found");
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            if (!document.getElementById('amanat-realtime-styles')) {
                const style = document.createElement('style');
                style.id = 'amanat-realtime-styles';
                style.textContent = `
                    .realtime-updated {
                        background-color: #d4edda !important;
                        transition: background-color 0.3s ease;
                    }
                    .field-updated {
                        background-color: #fff3cd !important;
                        transition: background-color 0.3s ease;
                    }
                `;
                document.head.appendChild(style);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
            if (messageData.records) {
                messageData.records.forEach(record => {
                    updateListRecord(listContainer, record, messageData);
                });
            }
            
        } catch (error) {
            console.error("‚ùå Error updating list view:", error);
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–∫–µ
    function updateListRecord(listContainer, record, messageData) {
        try {
            const recordRow = listContainer.querySelector(`tr[data-id="${record.id}"]`);
            
            if (recordRow) {
                console.log(`üìã Updating existing record ${record.id}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫–∏
                const cells = recordRow.querySelectorAll('td[name]');
                cells.forEach(cell => {
                    const fieldName = cell.getAttribute('name');
                    if (fieldName && record.hasOwnProperty(fieldName)) {
                        const newValue = record[fieldName];
                        const oldValue = cell.textContent.trim();
                        
                        if (newValue != oldValue) {
                            cell.textContent = newValue;
                            cell.classList.add('field-updated');
                            
                            setTimeout(() => {
                                cell.classList.remove('field-updated');
                            }, 3000);
                        }
                    }
                });
                
                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
                recordRow.classList.add('realtime-updated');
                setTimeout(() => {
                    recordRow.classList.remove('realtime-updated');
                }, 3000);
                
            } else {
                console.log(`üìã Record ${record.id} not found in current view`);
            }
            
        } catch (error) {
            console.error("‚ùå Error updating list record:", error);
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Form View
    function updateFormView(messageData) {
        console.log("üìù Updating form view");
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Kanban View
    function updateKanbanView(messageData) {
        console.log("üìä Updating kanban view");
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ kanban
    }
    
    console.log("‚úÖ Amanat Real-Time Service started successfully");
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    return {
        getCurrentUserId: () => currentUserId,
        sendTestMessage: () => {
            console.log("üß™ Sending test message...");
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        }
    };
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
registry.category("services").add("editing_state", editingStateService);
registry.category("services").add("amanat_realtime", amanatRealTimeService);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.testAmanatRealtime = {
    // –¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    testSimpleNotification: async () => {
        console.log("üß™ Testing simple notification...");
        try {
            const result = await fetch("/amanat/test_realtime_simple", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Requested-With": "XMLHttpRequest"
                },
                body: JSON.stringify({
                    jsonrpc: "2.0",
                    method: "call",
                    params: {},
                    id: Math.floor(Math.random() * 1000000)
                })
            });
            const data = await result.json();
            console.log("üß™ Simple notification result:", data);
        } catch (error) {
            console.error("üß™ Simple notification error:", error);
        }
    },
    
    // –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    testCustomChannel: async () => {
        console.log("üß™ Testing custom channel...");
        try {
            const result = await fetch("/amanat/test_custom_channel", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Requested-With": "XMLHttpRequest"
                },
                body: JSON.stringify({
                    jsonrpc: "2.0",
                    method: "call",
                    params: {},
                    id: Math.floor(Math.random() * 1000000)
                })
            });
            const data = await result.json();
            console.log("üß™ Custom channel result:", data);
        } catch (error) {
            console.error("üß™ Custom channel error:", error);
        }
    },
    
    // –¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
    testAllMethods: async () => {
        console.log("üß™ Testing all methods...");
        try {
            const result = await fetch("/amanat/test_all_methods", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Requested-With": "XMLHttpRequest"
                },
                body: JSON.stringify({
                    jsonrpc: "2.0",
                    method: "call",
                    params: {},
                    id: Math.floor(Math.random() * 1000000)
                })
            });
            const data = await result.json();
            console.log("üß™ All methods result:", data);
        } catch (error) {
            console.error("üß™ All methods error:", error);
        }
    }
};

console.log("üß™ Test functions available at window.testAmanatRealtime");
console.log("üß™ - window.testAmanatRealtime.testSimpleNotification()");
console.log("üß™ - window.testAmanatRealtime.testCustomChannel()"); 
console.log("üß™ - window.testAmanatRealtime.testAllMethods()");