/** @odoo-module **/

import { Component, onMounted, onWillUnmount } from "@odoo/owl";
import { registry } from "@web/core/registry";

class FixedColumnsCalculator {
    constructor() {
        this.observer = null;
        this.routeObserver = null;
        this.initialized = false;
        this.debounceTimer = null;
        this.isProcessing = false;
        this.lastTableHTML = '';
    }

    init() {
        if (this.initialized) return;
        
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫');
        this.setupMutationObserver();
        this.setupRouteObserver();
        this.calculateAndApplyPositions();
        this.initialized = true;
    }

    debounce(func, delay) {
        return (...args) => {
            clearTimeout(this.debounceTimer);
            this.debounceTimer = setTimeout(() => func.apply(this, args), delay);
        };
    }

    setupMutationObserver() {
        // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        const debouncedRecalculate = this.debounce(() => {
            if (!this.isProcessing) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏');
                this.calculateAndApplyPositions();
            }
        }, 200);

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
        this.observer = new MutationObserver((mutations) => {
            let shouldRecalculate = false;
            
            mutations.forEach((mutation) => {
                if (mutation.type === 'childList' || mutation.type === 'attributes') {
                    const target = mutation.target;
                    if (target.classList && (
                        target.classList.contains('o_list_view') ||
                        target.classList.contains('o_list_table') ||
                        target.closest('.o_list_view')
                    )) {
                        shouldRecalculate = true;
                    }
                }
            });

            if (shouldRecalculate) {
                debouncedRecalculate();
            }
        });

        this.observer.observe(document.body, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ['class', 'style']
        });
    }

    setupRouteObserver() {
        // –û—Ç–¥–µ–ª—å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü
        const debouncedRouteRecalculate = this.debounce(() => {
            console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º');
            this.calculateAndApplyPositions();
        }, 500);

        this.routeObserver = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'childList') {
                    const addedNodes = Array.from(mutation.addedNodes);
                    const hasListView = addedNodes.some(node => 
                        node.nodeType === 1 && (
                            node.classList?.contains('o_action_manager') ||
                            node.classList?.contains('o_content') ||
                            node.querySelector?.('.o_list_view')
                        )
                    );
                    
                    if (hasListView) {
                        debouncedRouteRecalculate();
                    }
                }
            });
        });
        
        const targetElement = document.querySelector('.o_action_manager') || document.body;
        this.routeObserver.observe(targetElement, {
            childList: true,
            subtree: true
        });
    }

    calculateAndApplyPositions() {
        if (this.isProcessing) return;
        this.isProcessing = true;

        const tables = document.querySelectorAll('.o_list_view:not(.o_field_many2many) .o_list_table');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        const currentTableHTML = Array.from(tables).map(t => t.outerHTML).join('');
        if (currentTableHTML === this.lastTableHTML) {
            this.isProcessing = false;
            return;
        }
        this.lastTableHTML = currentTableHTML;
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${tables.length} —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

        tables.forEach((table, tableIndex) => {
            console.log(`\nüìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ${tableIndex + 1}:`);
            this.processTable(table, tableIndex);
        });

        this.isProcessing = false;
    }

    processTable(table, tableIndex) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —à–∏—Ä–∏–Ω
        const firstRow = table.querySelector('thead tr') || table.querySelector('tbody tr');
        if (!firstRow) {
            console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã');
            return;
        }

        const cells = firstRow.querySelectorAll('th, td');
        if (cells.length < 4) {
            console.log(`‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ –º–µ–Ω—å—à–µ 4 –∫–æ–ª–æ–Ω–æ–∫ (${cells.length})`);
            return;
        }

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã –≥—Ä–∞–Ω–∏—Ü
        this.clearOldBorderClasses(table);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–≤—ã—Ö 4 –∫–æ–ª–æ–Ω–æ–∫
        const positions = this.calculatePositions(cells);
        console.log('üìè –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:', positions);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        this.applyPositionsToHeaders(table, positions);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
        this.applyPositionsToRows(table, positions);
    }

    clearOldBorderClasses(table) {
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã –≥—Ä–∞–Ω–∏—Ü —Å–æ –≤—Å–µ—Ö —è—á–µ–µ–∫
        const allCells = table.querySelectorAll('th, td');
        allCells.forEach(cell => {
            cell.classList.remove('fixed-column-with-border');
        });
        console.log('üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã –≥—Ä–∞–Ω–∏—Ü');
    }

    isManyToManyCell(cell) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ many2many –ø–æ–ª–µ–π
        const classNames = cell.className || '';
        const cellContent = cell.innerHTML || '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã —è—á–µ–π–∫–∏
        if (classNames.includes('o_field_many2many') || 
            classNames.includes('o_many2many') ||
            classNames.includes('o_field_widget_many2many')) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ many2many –≤–∏–¥–∂–µ—Ç–æ–≤
        if (cellContent.includes('o_field_many2many') ||
            cellContent.includes('o_many2many_tags') ||
            cellContent.includes('o_field_widget_many2many')) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const fieldWidget = cell.querySelector('.o_field_widget');
        if (fieldWidget && fieldWidget.classList.contains('o_field_many2many')) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç name –¥–ª—è many2many –ø–æ–ª–µ–π
        const nameAttr = cell.getAttribute('name') || '';
        if (nameAttr && cell.closest('.o_field_many2many')) {
            return true;
        }
        
        return false;
    }

    calculatePositions(cells) {
        const positions = [0]; // –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ 0
        let cumulativeWidth = 0;
        const borderWidth = 2; // –®–∏—Ä–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö (border-right: 2px)

        for (let i = 0; i < Math.min(4, cells.length - 1); i++) {
            const cell = cells[i];
            const width = cell.offsetWidth;
            
            console.log(`  –ö–æ–ª–æ–Ω–∫–∞ ${i + 1}: —à–∏—Ä–∏–Ω–∞ = ${width}px`);
            
            cumulativeWidth += width;
            
            // –í—ã—á–∏—Ç–∞–µ–º —à–∏—Ä–∏–Ω—É –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            // –î–ª—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π (—É –ø–µ—Ä–≤–æ–π –Ω–µ—Ç –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è)
            const adjustedPosition = i === 0 ? cumulativeWidth : cumulativeWidth - (borderWidth * (i + 1));
            
            console.log(`    - –ò—Å—Ö–æ–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: ${cumulativeWidth}px`);
            console.log(`    - –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: ${adjustedPosition}px (–≤—ã—á—Ç–µ–Ω–æ ${borderWidth * (i + 1)}px –≥—Ä–∞–Ω–∏—Ü)`);
            
            positions.push(adjustedPosition);
        }

        return positions.slice(0, 4); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 –ø–æ–∑–∏—Ü–∏–∏
    }

    applyPositionsToHeaders(table, positions) {
        const headerCells = table.querySelectorAll('thead th:nth-child(-n+4)');
        
        headerCells.forEach((cell, index) => {
            if (index < positions.length) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ many2many –ø–æ–ª–µ–º
                if (this.isManyToManyCell(cell)) {
                    console.log(`  ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ ${index + 1}: many2many –ø–æ–ª–µ`);
                    return;
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ inline —Å—Ç–∏–ª—å
                cell.style.setProperty('left', `${positions[index]}px`, 'important');
                
                // –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
                cell.classList.add('fixed-column-with-border');
                
                console.log(`  ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ ${index + 1}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω left = ${positions[index]}px, –¥–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å –≥—Ä–∞–Ω–∏—Ü—ã`);
                console.log(`    - –ö–ª–∞—Å—Å—ã: ${cell.className}`);
            }
        });
    }

    applyPositionsToRows(table, positions) {
        const rows = table.querySelectorAll('tbody tr');
        
        rows.forEach((row, rowIndex) => {
            const cells = row.querySelectorAll('td:nth-child(-n+4)');
            
            cells.forEach((cell, cellIndex) => {
                if (cellIndex < positions.length) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ many2many –ø–æ–ª–µ–º
                    // if (this.isManyToManyCell(cell)) {
                    //     if (rowIndex === 0) {
                    //         console.log(`  ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —è—á–µ–π–∫—É ${cellIndex + 1}: many2many –ø–æ–ª–µ`);
                    //     }
                    //     return;
                    // }
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ inline —Å—Ç–∏–ª—å
                    cell.style.setProperty('left', `${positions[cellIndex]}px`, 'important');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
                    cell.classList.add('fixed-column-with-border');
                    
                    // –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
                    if (rowIndex === 0) {
                        console.log(`  ‚úÖ –Ø—á–µ–π–∫–∞ ${cellIndex + 1}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω left = ${positions[cellIndex]}px, –¥–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å –≥—Ä–∞–Ω–∏—Ü—ã`);
                        console.log(`    - –ö–ª–∞—Å—Å—ã: ${cell.className}`);
                    }
                }
            });
        });
    }

    destroy() {
        if (this.observer) {
            this.observer.disconnect();
            this.observer = null;
        }
        if (this.routeObserver) {
            this.routeObserver.disconnect();
            this.routeObserver = null;
        }
        clearTimeout(this.debounceTimer);
        this.initialized = false;
        console.log('üóëÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const fixedColumnsCalculator = new FixedColumnsCalculator();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        fixedColumnsCalculator.init();
    });
} else {
    fixedColumnsCalculator.init();
}

export default fixedColumnsCalculator;

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
window.debugFixedColumns = () => {
    console.log('üîç –†–£–ß–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–• –ö–û–õ–û–ù–û–ö');
    console.log('=====================================');
    
    const tables = document.querySelectorAll('.o_list_view:not(.o_field_many2many) .o_list_table');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);
    
    tables.forEach((table, index) => {
        console.log(`\nüìã –¢–ê–ë–õ–ò–¶–ê ${index + 1}:`);
        console.log('Element:', table);
        
        const thead = table.querySelector('thead');
        const tbody = table.querySelector('tbody');
        
        console.log(`  - –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${thead ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
        console.log(`  - –¢–µ–ª–æ: ${tbody ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
        
        if (thead) {
            const headerCells = thead.querySelectorAll('th');
            console.log(`  - –ö–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: ${headerCells.length}`);
            
            headerCells.forEach((cell, cellIndex) => {
                if (cellIndex < 4) {
                    console.log(`    –ö–æ–ª–æ–Ω–∫–∞ ${cellIndex + 1}:`);
                    console.log(`      - offsetWidth: ${cell.offsetWidth}px`);
                    console.log(`      - clientWidth: ${cell.clientWidth}px`);
                    console.log(`      - scrollWidth: ${cell.scrollWidth}px`);
                    console.log(`      - —Ç–µ–∫—É—â–∏–π left: ${cell.style.left || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
                    console.log(`      - CSS –∫–ª–∞—Å—Å—ã: ${cell.className || '–Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤'}`);
                    console.log(`      - –ï—Å—Ç—å –∫–ª–∞—Å—Å –≥—Ä–∞–Ω–∏—Ü—ã: ${cell.classList.contains('fixed-column-with-border') ? '–î–ê' : '–ù–ï–¢'}`);
                    console.log(`      - Many2Many –ø–æ–ª–µ: ${fixedColumnsCalculator.isManyToManyCell(cell) ? '–î–ê' : '–ù–ï–¢'}`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
                    const computedStyle = window.getComputedStyle(cell);
                    console.log(`      - –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π border-right: ${computedStyle.borderRight || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
                    console.log(`      - –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π box-shadow: ${computedStyle.boxShadow || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
                }
            });
        }
        
        if (tbody) {
            const firstRow = tbody.querySelector('tr');
            if (firstRow) {
                const dataCells = firstRow.querySelectorAll('td');
                console.log(`  - –ö–æ–ª–æ–Ω–æ–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ: ${dataCells.length}`);
            }
        }
    });
    
    console.log('\nüîß –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏...');
    fixedColumnsCalculator.calculateAndApplyPositions();
};

console.log('üí° –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏: debugFixedColumns()'); 