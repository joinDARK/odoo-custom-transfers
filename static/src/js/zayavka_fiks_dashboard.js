/** @odoo-module **/

import { Component, onMounted, onWillStart, useState } from "@odoo/owl";
import { registry } from "@web/core/registry";
import { useService } from "@web/core/utils/hooks";
import { loadJS } from "@web/core/assets";

/**
 * –î–∞—à–±–æ—Ä–¥ —Ñ–∏–∫—Å –∑–∞—è–≤–æ–∫
 */
export class ZayavkaFiksDashboard extends Component {
    static template = "amanat.ZayavkaFiksDashboard";
    
    setup() {
        this.orm = useService("orm");
        this.actionService = useService("action");
        this.notificationService = useService("notification");
        
        // –£–±–∏—Ä–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–ª—è –±—É–¥—É—Ç –ø—É—Å—Ç—ã–º–∏
        this.state = useState({
            loading: false,
            dashboardData: null,
            dateFrom: '',  // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
            dateTo: '',    // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞
        });
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        this.chart = null;
        this.todayChart = null;
        
        onWillStart(this.willStart);
        onMounted(this.mounted);
    }
    
    async willStart() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º Chart.js
        await loadJS("https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js");
        await this.loadDashboardData();
    }
    
    async mounted() {
        console.log('Fiks Dashboard mounted with data:', this.state.dashboardData);
        if (this.state.dashboardData && this.state.dashboardData.chart_data) {
            this.createChart();
        }
        if (this.state.dashboardData && this.state.dashboardData.today_data && this.state.dashboardData.today_data.chart_data) {
            this.createTodayChart();
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    createChart() {
        const ctx = document.getElementById('currencyChart');
        if (!ctx || !this.state.dashboardData.chart_data) return;
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.chart) {
            this.chart.destroy();
        }
        
        const chartData = this.state.dashboardData.chart_data;
        
        // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        chartData.datasets[0].backgroundColor = [
            '#5b9bd5',  // USD - –≥–æ–ª—É–±–æ–π
            '#70ad47',  // CNY - –∑–µ–ª–µ–Ω—ã–π
            '#ffc000',  // EURO - –∂–µ–ª—Ç—ã–π
            '#7030a0'   // AED - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        ];
        chartData.datasets[0].borderColor = [
            '#4472c4',
            '#548235',
            '#d99694',
            '#5b2c87'
        ];
        chartData.datasets[0].borderWidth = 1;
        chartData.datasets[0].borderRadius = 4;
        
        this.chart = new Chart(ctx, {
            type: 'bar',
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: '–°—É–º–º—ã –ø–æ –≤–∞–ª—é—Ç–∞–º',
                        font: {
                            size: 16,
                            weight: '600',
                            family: 'Segoe UI, Roboto, Arial, sans-serif'
                        },
                        color: '#333333',
                        padding: {
                            top: 10,
                            bottom: 20
                        }
                    },
                    legend: {
                        display: false
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            font: {
                                size: 12,
                                family: 'Segoe UI, Roboto, Arial, sans-serif'
                            },
                            color: '#666666'
                        },
                        grid: {
                            color: '#e9ecef',
                            lineWidth: 1
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            font: {
                                size: 11,
                                family: 'Segoe UI, Roboto, Arial, sans-serif'
                            },
                            color: '#666666',
                            callback: function(value) {
                                return value.toLocaleString();
                            }
                        },
                        grid: {
                            color: '#e9ecef',
                            lineWidth: 1
                        }
                    }
                },
                elements: {
                    bar: {
                        borderRadius: 4,
                        borderSkipped: false
                    }
                },
                animation: {
                    duration: 800,
                    easing: 'easeInOutQuart'
                }
            }
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    createTodayChart() {
        const ctx = document.getElementById('todayCurrencyChart');
        if (!ctx || !this.state.dashboardData.today_data.chart_data) return;
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.todayChart) {
            this.todayChart.destroy();
        }
        
        const chartData = this.state.dashboardData.today_data.chart_data;
        
        // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        chartData.datasets[0].backgroundColor = [
            '#5b9bd5',  // USD - –≥–æ–ª—É–±–æ–π
            '#70ad47',  // CNY - –∑–µ–ª–µ–Ω—ã–π
            '#ffc000',  // EURO - –∂–µ–ª—Ç—ã–π
            '#7030a0'   // AED - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        ];
        chartData.datasets[0].borderColor = [
            '#4472c4',
            '#548235',
            '#d99694',
            '#5b2c87'
        ];
        chartData.datasets[0].borderWidth = 1;
        chartData.datasets[0].borderRadius = 4;
        
        this.todayChart = new Chart(ctx, {
            type: 'bar',
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: '–°—É–º–º—ã –ø–æ –≤–∞–ª—é—Ç–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
                        font: {
                            size: 16,
                            weight: '600',
                            family: 'Segoe UI, Roboto, Arial, sans-serif'
                        },
                        color: '#333333',
                        padding: {
                            top: 10,
                            bottom: 20
                        }
                    },
                    legend: {
                        display: false
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            font: {
                                size: 12,
                                family: 'Segoe UI, Roboto, Arial, sans-serif'
                            },
                            color: '#666666'
                        },
                        grid: {
                            color: '#e9ecef',
                            lineWidth: 1
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            font: {
                                size: 11,
                                family: 'Segoe UI, Roboto, Arial, sans-serif'
                            },
                            color: '#666666',
                            callback: function(value) {
                                return value.toLocaleString();
                            }
                        },
                        grid: {
                            color: '#e9ecef',
                            lineWidth: 1
                        }
                    }
                },
                elements: {
                    bar: {
                        borderRadius: 4,
                        borderSkipped: false
                    }
                },
                animation: {
                    duration: 800,
                    easing: 'easeInOutQuart'
                }
            }
        });
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
     */
    async loadDashboardData() {
        this.state.loading = true;
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:', {
                dateFrom: this.state.dateFrom || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
                dateTo: this.state.dateTo || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            });
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã
            const params = {};
            if (this.state.dateFrom && this.state.dateFrom.trim()) {
                params.date_from = this.state.dateFrom;
            }
            if (this.state.dateTo && this.state.dateTo.trim()) {
                params.date_to = this.state.dateTo;
            }
            
            const result = await this.orm.call(
                'amanat.zayavka_fiks_dashboard',
                'get_fiks_dashboard_data',
                [],
                params
            );
            
            if (result.success && result.data) {
                this.state.dashboardData = result.data;
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.state.dashboardData);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                if (this.chart) {
                    this.createChart();
                }
                if (this.state.dashboardData.today_data && this.state.dashboardData.today_data.chart_data) {
                    this.createTodayChart();
                }
            } else {
                console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', result.error);
                this.notificationService.add(result.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞", {
                    type: "warning",
                });
            }
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
            this.notificationService.add(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, {
                type: "danger",
            });
        } finally {
            this.state.loading = false;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
     */
    async onDateFromChange(ev) {
        console.log('üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:', this.state.dateFrom);
        await this.loadDashboardData();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞
     */
    async onDateToChange(ev) {
        console.log('üìÖ –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:', this.state.dateTo);
        await this.loadDashboardData();
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
     */
    async setQuickPeriod(period) {
        console.log('üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–∏–æ–¥ –≤—ã–±—Ä–∞–Ω:', period);
        
        const today = new Date();
        let dateFrom = '';
        let dateTo = '';
        
        switch (period) {
            case 'week':
                // –ó–∞ –Ω–µ–¥–µ–ª—é - —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –¥–æ —Å–µ–≥–æ–¥–Ω—è
                const startOfWeek = new Date(today);
                const dayOfWeek = today.getDay();
                const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 0
                startOfWeek.setDate(today.getDate() - daysToMonday);
                
                dateFrom = startOfWeek.toISOString().split('T')[0];
                dateTo = today.toISOString().split('T')[0];
                break;
                
            case 'month':
                // –ó–∞ –º–µ—Å—è—Ü - —Å –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è
                const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                
                dateFrom = startOfMonth.toISOString().split('T')[0];
                dateTo = today.toISOString().split('T')[0];
                break;
                
            case '3months':
                // –ó–∞ 3 –º–µ—Å—è—Ü–∞ - 3 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥ –æ—Ç —Å–µ–≥–æ–¥–Ω—è
                const threeMonthsAgo = new Date(today);
                threeMonthsAgo.setMonth(today.getMonth() - 3);
                
                dateFrom = threeMonthsAgo.toISOString().split('T')[0];
                dateTo = today.toISOString().split('T')[0];
                break;
                
            case 'all':
                // –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è - –æ—á–∏—â–∞–µ–º –¥–∞—Ç—ã
                dateFrom = '';
                dateTo = '';
                break;
                
            default:
                console.warn('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:', period);
                return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state.dateFrom = dateFrom;
        this.state.dateTo = dateTo;
        
        console.log(`‚úÖ –ü–µ—Ä–∏–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${period}, –æ—Ç: ${dateFrom}, –¥–æ: ${dateTo}`);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        await this.loadDashboardData();
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
registry.category("actions").add("zayavka_fiks_dashboard_action", ZayavkaFiksDashboard); 