/** @odoo-module **/

import { registry } from "@web/core/registry";
import { useService } from "@web/core/utils/hooks";
import { Component } from "@odoo/owl";

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TestRealtimeButtons extends Component {
    static template = "amanat.TestRealtimeButtons";
    
    setup() {
        this.rpc = useService("rpc");
        this.notification = useService("notification");
    }
    
    async testBusMessage() {
        try {
            console.log("üß™ Testing bus message...");
            
            const result = await this.rpc("/amanat/test_bus", {});
            
            console.log("üß™ Bus test result:", result);
            
            if (result.success) {
                this.notification.add("Bus test message sent!", {
                    type: "success",
                });
            } else {
                this.notification.add(`Bus test failed: ${result.error}`, {
                    type: "danger",
                });
            }
        } catch (error) {
            console.error("üß™ Bus test error:", error);
            this.notification.add(`Bus test error: ${error.message}`, {
                type: "danger",
            });
        }
    }
    
    async testRealtimeUpdate() {
        try {
            console.log("üß™ Testing realtime update...");
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –º–æ–¥–µ–ª–∏ transfer
            const result = await this.rpc("/web/dataset/call_kw", {
                model: "amanat.transfer",
                method: "create",
                args: [{
                    name: `Test Transfer ${new Date().getTime()}`,
                    amount: 100.0,
                }],
                kwargs: {}
            });
            
            console.log("üß™ Test record created:", result);
            
            this.notification.add("Test record created! Check console for real-time updates.", {
                type: "success",
            });
            
        } catch (error) {
            console.error("üß™ Realtime test error:", error);
            this.notification.add(`Realtime test error: ${error.message}`, {
                type: "danger",
            });
        }
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
window.testAmanatBus = async function() {
    try {
        const response = await fetch('/amanat/test_bus', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                jsonrpc: "2.0",
                method: "call",
                params: {},
                id: Math.floor(Math.random() * 1000)
            })
        });
        
        const result = await response.json();
        console.log("üß™ Bus test from console:", result);
        return result;
    } catch (error) {
        console.error("üß™ Console bus test error:", error);
        return { success: false, error: error.message };
    }
};

window.testAmanatRealtime = async function() {
    try {
        const response = await fetch('/web/dataset/call_kw', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                jsonrpc: "2.0",
                method: "call",
                params: {
                    model: "amanat.transfer",
                    method: "create",
                    args: [{
                        name: `Console Test ${new Date().getTime()}`,
                        amount: 999.0,
                    }],
                    kwargs: {}
                },
                id: Math.floor(Math.random() * 1000)
            })
        });
        
        const result = await response.json();
        console.log("üß™ Realtime test from console:", result);
        return result;
    } catch (error) {
        console.error("üß™ Console realtime test error:", error);
        return { success: false, error: error.message };
    }
};

console.log("üß™ Test functions registered:");
console.log("üß™ Use testAmanatBus() to test bus messages");
console.log("üß™ Use testAmanatRealtime() to test realtime updates");

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ real-time —Å–∏—Å—Ç–µ–º—ã
const testButtonsService = {
    dependencies: ["bus_service", "notification"],
    
    start(env, { bus_service, notification }) {
        console.log("üß™ Test Buttons Service starting...");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        window.amanatTest = {
            // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ bus —Å–æ–æ–±—â–µ–Ω–∏—è
            sendTestBusMessage: () => {
                console.log("üß™ TEST: Sending test bus message");
                try {
                    const testMessage = {
                        type: 'test',
                        message: 'Hello from frontend!',
                        timestamp: new Date().toISOString()
                    };
                    
                    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const userId = window.odoo?.session_info?.uid || 2;
                    const userChannel = `res.users,${userId}`;
                    
                    console.log(`üß™ TEST: Sending to channel ${userChannel}:`, testMessage);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ bus
                    bus_service.trigger('test_message', testMessage);
                    
                    notification.add("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", {
                        type: "success",
                        title: "–¢–µ—Å—Ç Bus"
                    });
                } catch (error) {
                    console.error("üß™ TEST ERROR:", error);
                    notification.add(`–û—à–∏–±–∫–∞: ${error.message}`, {
                        type: "danger",
                        title: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞"
                    });
                }
            },
            
            // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
            checkBusSubscriptions: () => {
                console.log("üß™ TEST: Checking bus subscriptions");
                console.log("üß™ TEST: Bus service:", bus_service);
                console.log("üß™ TEST: Current user ID:", window.odoo?.session_info?.uid);
                
                // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ bus —Å–µ—Ä–≤–∏—Å–µ
                if (bus_service) {
                    console.log("üß™ TEST: Bus service available");
                    console.log("üß™ TEST: Bus service methods:", Object.getOwnPropertyNames(bus_service));
                } else {
                    console.error("üß™ TEST: Bus service not available!");
                }
                
                notification.add("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - —Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å", {
                    type: "info",
                    title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ Bus"
                });
            },
            
            // –¢–µ—Å—Ç 3: –í—ã–∑–æ–≤ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            callTestController: async () => {
                console.log("üß™ TEST: Calling test controller");
                try {
                    const response = await fetch('/amanat/test_bus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            jsonrpc: "2.0",
                            method: "call",
                            params: {},
                            id: new Date().getTime(),
                        }),
                    });
                    
                    const data = await response.json();
                    console.log("üß™ TEST: Controller response:", data);
                    
                    if (data.result?.success) {
                        notification.add("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!", {
                            type: "success",
                            title: "–¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"
                        });
                    } else {
                        notification.add(`–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: ${data.result?.error}`, {
                            type: "warning",
                            title: "–¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"
                        });
                    }
                } catch (error) {
                    console.error("üß™ TEST: Controller call error:", error);
                    notification.add(`–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞: ${error.message}`, {
                        type: "danger",
                        title: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"
                    });
                }
            },
            
            // –¢–µ—Å—Ç 4: –ü—Ä—è–º–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
            subscribeDirectly: () => {
                console.log("üß™ TEST: Direct subscription test");
                const userId = window.odoo?.session_info?.uid || 2;
                const userChannel = `res.users,${userId}`;
                
                console.log(`üß™ TEST: Subscribing directly to ${userChannel}`);
                
                try {
                    bus_service.addChannel(userChannel);
                    console.log(`ÔøΩÔøΩ TEST: Successfully subscribed to ${userChannel}`);
                    
                    notification.add(`–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª ${userChannel}`, {
                        type: "success",
                        title: "–ü—Ä—è–º–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
                    });
                } catch (error) {
                    console.error("üß™ TEST: Direct subscription error:", error);
                    notification.add(`–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${error.message}`, {
                        type: "danger",
                        title: "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"
                    });
                }
            }
        };
        
        console.log("üß™ Test functions available at window.amanatTest");
        console.log("üß™ Available tests:", Object.keys(window.amanatTest));
        
        return {};
    }
};

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
registry.category("services").add("test_buttons", testButtonsService);

console.log("üß™ Test Buttons Service registered"); 