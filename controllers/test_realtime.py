from odoo import http
from odoo.http import request
from odoo import fields
import json
import logging

_logger = logging.getLogger(__name__)


class TestRealtimeController(http.Controller):
    
    @http.route('/amanat/test_realtime_simple', type='json', auth='user')
    def test_simple_notification(self, **kwargs):
        """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            _logger.info("üß™ SIMPLE NOTIFICATION TEST: Starting...")
            
            user = request.env.user
            partner = user.partner_id
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ Odoo 18
            message = {
                'type': 'simple_notification',
                'title': '–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                'message': f'–ü—Ä–∏–≤–µ—Ç –æ—Ç {user.name}! –í—Ä–µ–º—è: {fields.Datetime.now()}',
                'sticky': False,
                'warning': False,
            }
            
            _logger.info(f"üß™ Sending to partner {partner.id}: {message}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ partner (2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞!)
            request.env['bus.bus']._sendone(partner, 'simple_notification', message)
            
            _logger.info("üß™ Simple notification sent successfully")
            
            return {
                'success': True,
                'message': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                'partner_id': partner.id,
                'user_name': user.name
            }
            
        except Exception as e:
            _logger.error(f"üß™ SIMPLE NOTIFICATION ERROR: {e}")
            import traceback
            _logger.error(f"üß™ TRACEBACK: {traceback.format_exc()}")
            return {
                'success': False,
                'error': str(e)
            }
    
    @http.route('/amanat/test_custom_channel', type='json', auth='user')
    def test_custom_channel(self, **kwargs):
        """–¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            _logger.info("üß™ CUSTOM CHANNEL TEST: Starting...")
            
            user = request.env.user
            custom_channel = f"amanat_realtime_{user.id}"
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            message = {
                'type': 'amanat_realtime_update',
                'data': {
                    'type': 'update',
                    'model': 'test.model',
                    'model_display_name': '–¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å',
                    'user_id': user.id,
                    'user_name': user.name,
                    'timestamp': fields.Datetime.now().isoformat(),
                    'records': [{
                        'id': 999,
                        'display_name': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å',
                        'name': f'Test Record by {user.name}'
                    }],
                    'changed_fields': ['name']
                },
                'user_id': user.id,
                'timestamp': fields.Datetime.now().isoformat()
            }
            
            _logger.info(f"üß™ Sending to custom channel {custom_channel}: {message}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–Ω–∞–ª (2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞!)
            request.env['bus.bus']._sendone(custom_channel, message)
            
            _logger.info("üß™ Custom channel message sent successfully")
            
            return {
                'success': True,
                'message': f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–Ω–∞–ª {custom_channel}',
                'channel': custom_channel,
                'user_name': user.name
            }
            
        except Exception as e:
            _logger.error(f"üß™ CUSTOM CHANNEL ERROR: {e}")
            import traceback
            _logger.error(f"üß™ TRACEBACK: {traceback.format_exc()}")
            return {
                'success': False,
                'error': str(e)
            }
    
    @http.route('/amanat/test_user_channel', type='json', auth='user')
    def test_user_channel(self, **kwargs):
        """–¢–µ—Å—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            _logger.info("üß™ USER CHANNEL TEST: Starting...")
            
            user = request.env.user
            user_channel = f"res.users,{user.id}"
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            message = {
                'type': 'update',
                'model': 'amanat.test.realtime',
                'model_display_name': '–¢–µ—Å—Ç Real-time',
                'user_id': user.id,
                'user_name': user.name,
                'timestamp': fields.Datetime.now().isoformat(),
                'records': [{
                    'id': 777,
                    'display_name': '–¢–µ—Å—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞',
                    'name': f'User Channel Test by {user.name}'
                }],
                'changed_fields': ['name']
            }
            
            _logger.info(f"üß™ Sending to user channel {user_channel}: {message}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞!)
            request.env['bus.bus']._sendone(user_channel, message)
            
            _logger.info("üß™ User channel message sent successfully")
            
            return {
                'success': True,
                'message': f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª {user_channel}',
                'channel': user_channel,
                'user_name': user.name
            }
            
        except Exception as e:
            _logger.error(f"üß™ USER CHANNEL ERROR: {e}")
            import traceback
            _logger.error(f"üß™ TRACEBACK: {traceback.format_exc()}")
            return {
                'success': False,
                'error': str(e)
            }
    
    @http.route('/amanat/test_all_methods', type='json', auth='user')
    def test_all_methods(self, **kwargs):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ bus —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            _logger.info("üß™ ALL METHODS TEST: Starting...")
            
            user = request.env.user
            results = []
            
            # –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                partner = user.partner_id
                message1 = {
                    'type': 'simple_notification',
                    'title': '–¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤',
                    'message': f'–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç {user.name}',
                    'sticky': False,
                }
                request.env['bus.bus']._sendone(partner, 'simple_notification', message1)
                results.append("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                _logger.info("üß™ Method 1 (simple_notification) successful")
            except Exception as e:
                results.append(f"‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
                _logger.error(f"üß™ Method 1 error: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–Ω–∞–ª
            try:
                custom_channel = f"amanat_realtime_{user.id}"
                message2 = {
                    'type': 'amanat_realtime_update',
                    'test': 'custom channel test',
                    'user_name': user.name
                }
                request.env['bus.bus']._sendone(custom_channel, message2)
                results.append("‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                _logger.info("üß™ Method 2 (custom channel) successful")
            except Exception as e:
                results.append(f"‚ùå –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–Ω–∞–ª: {e}")
                _logger.error(f"üß™ Method 2 error: {e}")
            
            # –ú–µ—Ç–æ–¥ 3: –õ–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
            try:
                user_channel = f"res.users,{user.id}"
                message3 = {
                    'type': 'user_channel_test',
                    'message': f'–õ–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –æ—Ç {user.name}',
                    'timestamp': fields.Datetime.now().isoformat()
                }
                request.env['bus.bus']._sendone(user_channel, message3)
                results.append("‚úÖ –õ–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                _logger.info("üß™ Method 3 (user channel) successful")
            except Exception as e:
                results.append(f"‚ùå –õ–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª: {e}")
                _logger.error(f"üß™ Method 3 error: {e}")
            
            _logger.info("üß™ ALL METHODS TEST: Completed")
            
            return {
                'success': True,
                'message': '–¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω',
                'results': results,
                'user_name': user.name
            }
            
        except Exception as e:
            _logger.error(f"üß™ ALL METHODS ERROR: {e}")
            import traceback
            _logger.error(f"üß™ TRACEBACK: {traceback.format_exc()}")
            return {
                'success': False,
                'error': str(e)
            }

    # –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @http.route('/amanat/test_realtime', type='http', auth='user', methods=['POST'])
    def test_realtime(self, **kwargs):
        """–°—Ç–∞—Ä—ã–π HTTP —Ç–µ—Å—Ç - –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        try:
            result = self.test_simple_notification()
            return json.dumps(result)
        except Exception as e:
            return json.dumps({'success': False, 'error': str(e)})
    
    @http.route('/amanat/test_bus', type='json', auth='user')
    def test_bus(self, **kwargs):
        """–°—Ç–∞—Ä—ã–π JSON —Ç–µ—Å—Ç - –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self.test_all_methods() 